<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面试资料</title>
    <link href="/2021/04/18/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/"/>
    <url>/2021/04/18/%E9%9D%A2%E8%AF%95%E8%B5%84%E6%96%99/</url>
    
    <content type="html"><![CDATA[<p>一、梳理自身的技能</p><ul><li><p>编程语言（Java）功底</p><ul><li>你熟悉的语言有哪些亮点特性？</li><li>你能运用这些特性写什么框架？</li></ul></li><li><p>Android系统原理</p><ul><li>程序是怎么运行的？</li><li>窗口是怎么显示的？</li><li>声音是怎么播放的？</li></ul></li><li><p>项目经验</p><ul><li>有哪些难点如何突破的？</li><li>有哪些你失败之处？</li></ul></li><li><p>架构设计</p><ul><li>为什么选这个方案？</li><li>如何进行模块边界的划分？</li><li>如何实现模块解耦？</li></ul></li></ul><p>二、明确自己的目标</p><ul><li>了解市场需求</li><li>明确自身水平</li><li>确定面试重点</li></ul><p>三、面试过程中的STAR法则（根据STAR法则去回答问题）</p><ul><li><p>情境（Situation）：所处什么情况？</p></li><li><p>任务（Task）：接到了什么任务？</p></li><li><p>行动（Action）：你怎么做的？</p><ul><li>你怎么分析思考的？</li><li>选择什么方案？为什么？</li><li>你怎么进行方案落实的？</li><li>你怎么协调团队推进项目的？</li><li>你怎么监控结果的？</li></ul></li><li><p>结果（Result）：结果如何？</p><ul><li>你的方案效果如何？</li><li>收益是什么？</li><li>具体数值是什么？</li><li>不要“大量”、“很多”这样的词汇</li></ul></li></ul><p>四、准备合适的简历</p><ul><li>基本信息简明扼要</li><li>求职意向清晰明了</li><li>根据JD（面试官意图）定制简历</li><li>拿出你的项目成果</li><li>避免空洞的自我评价</li></ul><p>五、简历模版</p><p>基本信息</p><p>男 | 本科 | 6年工作经验 | 长沙</p><p>TEL：19973310316</p><p>Email：<a href="mailto:&#x63;&#x68;&#x7a;&#104;&#x67;&#x6f;&#x6f;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;">&#x63;&#x68;&#x7a;&#104;&#x67;&#x6f;&#x6f;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a></p><p>期望岗位：Android工程师</p><p>期望工作城市：长沙</p><p>项目经历</p><p>xxxx年x月-xxxx年x月          XXXX有限公司</p><p>项目：XXX客户端</p><p>介绍：我主要负责部分页面的开发，尝试对页面过度绘制进行优化，优化后页面平均绘制耗时从20ms降到3ms（数值瞎写的）；活动、频道等功能的架构优化，对这些模块彻底解耦，降低维护成本约30%（工作量排期、做需求的时间估算出来的）；评论模块组件化通用化，在其他三个项目中得到复用，每个项目节省10人天的工作量。</p><p>（职责 - 背景 - 任务 - 行动 - 成果）</p><p>期间独立负责XX地图SDK的开发维护（职责），期间考虑到XXX原因导致项目可维护性较差（背景），主动进行一次彻底重构和优化（任务），将SDK接口与业界对齐（行动），包体积下降20%，方法数减少35%，（结果），删除冗余设计（行动），代码行数由x万行精简到y万行（结果），新增功能若干。此后也针对不同合作伙伴的定制发版碎片化问题进行统一梳理，开发构建工具，实现构建零人工，每次发版节省人力n人天。</p><p>自我评价</p><p>注重效率：习惯编写各种工具类、组件等提升工作效率</p><p>乐于分享：经常在团队内部组织技术研讨和交流</p><p>六、简历的关键词</p><ul><li>通过简历内容提取三个左右的关键词</li><li>关键词要与招聘需求匹配</li></ul><p>七、简历的“四要、四不要”</p><ul><li>要聚焦核心技能（不要写工具的使用，如git、svn等）、不要到处熟练精通</li><li>要突出技术亮点、不要罗列开源框架</li><li>要体现业务背景、不要堆积项目细节</li><li>要明确项目成果、不要陈述项目过程</li></ul><p>八、面试题</p><ul><li><p>Java的char是两个字节，如何存UTF-8字符？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否熟悉Java char和字符串（初级）</li><li>是否了解字符的映射和存储细节（中级）</li><li>是否能触类旁通，横向对比其他语言（高级）</li></ul><p>题目剖析：</p><p>1、分别占多少字节？</p><p>char可以存储两个字节，UTF-8可以存储一到三个字节</p><p>2、和Unicode什么关系？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">char</span> u8Test = <span class="hljs-string">&quot;庆&quot;</span>;<br><br>Integer.toHexString(u8Test);<br><br><span class="hljs-comment">// 打印出来是：0x5e 0x86两个字节，这两个字节就是Unicode码点，所以Unicode其实就是字符集</span><br><span class="hljs-comment">// ASCII码也是字符集，ASCII码与Unicode两者是兼容关系</span><br><span class="hljs-comment">// 字符集的作用是：完成字符到整数的映射</span><br><span class="hljs-comment">// 字符集不是编码，UTF-8是编码</span><br></code></pre></td></tr></table></figure><p>3、如何存储字符？</p><p>一个字符（如笑脸）是两个字节（0xd83d，0xde00），这两个字节其实就是字符集（Unicode、ASCII码）码点，如果通过UTF-8编码，会转换成byte类型，也就是四个字节（11110000，10011111，10011000，10000000），但在Java char里面，会通过UTF-16进行编码，转换成byte类型对应的四个字节（11011000（d8），00111101（3d），11011110（de），00000000（00）），然后通过计算器存储（比如序列化或磁盘），其实无所谓存不存的，因为在Java char里面，存储的是UTF-16的编码，跟UTF-8没有关系。</p><p>Tip：UTF-8与UTF-16的区别是：UTF-8最小的单位是一个字节，UTF-16最小的单位是两个字节</p><p>（如果字符是一个A，它对应的是65，用ASCII码7个bit来表示，但在UTF-16里面也是需要两个字节的）</p><p>4、字符串长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">java:<br>String emoji = “笑脸”;<br>System.out.println(emoji.length()); <span class="hljs-comment">// 长度为：2</span><br><br><span class="hljs-comment">// jdk9对Latin字符的存储空间做了优化，但字符串长度不等于字符数</span><br><br>python:<br>emoji = u<span class="hljs-string">&quot;笑脸&quot;</span><br>print(len(emoji)) <span class="hljs-comment">// 长度为：1</span><br><br><span class="hljs-comment">// 这一点python就做的很好</span><br></code></pre></td></tr></table></figure><p>题目结论：</p><ul><li>Java char 不存UTF-8的字节，而是UTF-16</li><li>Unicode通用字符占两个字节，例如“中”</li><li>Unicode扩展字符集需要用一对char来表示，例如“笑脸”</li><li>Unicode是字符集，不是编码，作用类似于ASCII码</li><li>Java String的length不是字符数，而是char的个数</li></ul></li><li><p>一、Java String可以有多长？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否对字符串编解码有深入了解</li><li>是否对字符串在内存当中的存储形式有深入了解</li><li>是否对Java虚拟机字节码有足够的了解</li><li>是否对Java虚拟机指令有一定的认识</li></ul><p>题目剖析：</p><p>1、字符串有多长是指字符数还是字节数？</p><p>2、字符串有几种存在形式？</p><p>3、字符串的不同形式受到何种限制？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">String longString = <span class="hljs-string">&quot;aaa ... aaa&quot;</span>; <span class="hljs-comment">// 存储在栈里，开辟空间小</span><br><span class="hljs-comment">// 长度 &lt;= 65535，字符串在字节码（*.class）里，是UTF-8的结构存储的</span><br><span class="hljs-comment">// Latin字符编译成字节码，是以MUTF-8(Modified UTF-8)编码的形式存储到字节码（*.class）中</span><br><span class="hljs-comment">// 在Java编译器：当字符串长度达到65535时，会报错，这是因为在源码（Gen.java）中，((String)constValue).length() &lt; Pool.Max_STRING_LENGTH，而不是 &lt;= 或 &gt;</span><br><span class="hljs-comment">// 在Kotlin编译器中：当字符串长度达到65535时，不会报错，因为在源码中，是 &gt;</span><br><span class="hljs-comment">// 总结：（存在栈上面的String）</span><br><span class="hljs-comment">// 1、受字节码限制，字符串最终的MUTF-8字节数不超过65535</span><br><span class="hljs-comment">// 2、Latin字符，受Javac代码限制，最多65534个</span><br><span class="hljs-comment">// 3、非Latin字符最终对应字节个数差异较大，最多字节个数是65535</span><br><span class="hljs-comment">// 4、如果运行时方法区设置较小，也会受到方法区大小的限制</span><br><br><span class="hljs-keyword">byte</span>[] bytes = loadFromFile(<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;superLongText.txt&quot;</span>));<br>String superLongString = <span class="hljs-keyword">new</span> String(bytes); <span class="hljs-comment">//存储在堆里，开辟空间大</span><br><span class="hljs-comment">// new String后背是char value[]数组，这个数组受到虚拟机指令（newarrary[int]）的限制，而newarrary[int]数组理论最大个数为Integer.MAX_VALUE</span><br><span class="hljs-comment">// 真的就是Integer.MAX_VALUE，这么大吗？不一定，因为ArrayList.java源码中的常量：MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8，也就是说实际上会小于Integer.MAX_VALUE</span><br><br><span class="hljs-comment">// 总结：（存在堆上面的String）</span><br><span class="hljs-comment">// 1、受虚拟机指令限制，字符数理论上限为Integer.MAX_VALUE</span><br><span class="hljs-comment">// 2、受虚拟机实现限制，实际上限可能会小于Integer.MAX_VALUE</span><br><span class="hljs-comment">// 3、如果堆内存较小，也会受到堆内存的限制</span><br></code></pre></td></tr></table></figure><p>题目结论：</p><ul><li>Java String字面量形式<ul><li>字节码中CONSTANT_Utf8_info的限制</li><li>Javac源码逻辑的限制</li><li>方法区大小的限制</li></ul></li><li>Java String运行时创建在堆上的形式<ul><li>Java虚拟机指令newarray的限制</li><li>Java虚拟机堆内存大小的限制</li></ul></li></ul><p><strong>推荐两本书：Java虚拟机规范、Java语言规范</strong></p></li><li><p>二、Java的匿名内部类有哪些限制？</p><p>面试官视角：这道题想考察什么？</p><ul><li>考察匿名内部类的概念和用法</li><li>考察语言规范以及语言的横向对比等</li><li>作为考察内存泄露的切入点</li></ul><p>题目剖析：</p><p>1、匿名内部类的名字</p><p>匿名内部类没有名字，但在字节码中会定义为 包路径.OuterClass$1..N（外部类加$N，N是匿名内部类的顺序，如：$1表示类里面定义的第一个匿名内部类）</p><p>2、匿名内部类的继承结构</p><p>匿名内部类被new出来的时候，先天就会弄出来一个父类，同时new的时候也可以是一个接口，但不能new一个又继承了一个类又实现接口的匿名内部类，因为在Java中不支持或类型，Jdk10支持类型推导，但是也不支持又继承了一个类又实现接口的匿名内部类。</p><p>Java不支持，但Kotlin支持：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> runnableFoo = <span class="hljs-keyword">object</span>: Foo(), Runnable &#123;<br><span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span> &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、匿名内部类的构造方法</p><p>匿名内部类的构造方法是编译器定义的，非静态内部类会引用外部类的实例，静态内部类则不会引用外部类的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// OuterClass指的是父类的外部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>  <span class="hljs-comment">// InnerClass指的是父类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Clinet</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass().<span class="hljs-function">new <span class="hljs-title">InnerClass</span><span class="hljs-params">()</span> </span>&#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 编译器定义的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>$1 </span>&#123;<br><span class="hljs-comment">// Clinet client：自己的外部类实例（匿名内部类所在的方法对应的外部作用域）</span><br><span class="hljs-comment">// OuterClass outerClass：非静态父类的外部类实例</span><br><span class="hljs-keyword">public</span> Clent$<span class="hljs-number">1</span>(Clinet client, OuterClass outerClass) &#123;<br>...<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>  <span class="hljs-comment">// interface定义的类，与静态类效果一致，不会引用外部类实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>  <span class="hljs-comment">// 非静态方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass.InnerClass() &#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 编译器定义的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>$1 </span>&#123;<br>  <span class="hljs-comment">// Clinet client：自己的外部类实例</span><br>  <span class="hljs-keyword">public</span> Clinet$<span class="hljs-number">1</span>(Clinet client) &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span> </span>&#123;<br>  <span class="hljs-comment">// interface定义的类，与静态类效果一致，不会引用外部类实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>  <span class="hljs-comment">// 静态方法</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass.InnerClass() &#123;<br>...<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 编译器定义的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>$1 </span>&#123;<br>  <span class="hljs-comment">// 因为定义在静态方法中，所以一个外部类的实例都不需要</span><br>  <span class="hljs-keyword">public</span> Clinet$<span class="hljs-number">1</span>() &#123;<br>    ...<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterCalss</span> </span>&#123;<br>  <span class="hljs-comment">// interface定义的类，与静态类效果一致，不会引用外部类实例</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">InnerClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span> </span>&#123;<br>  <span class="hljs-comment">// 静态方法</span><br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 为什么需要final修饰？因为在匿名内部类中使用时，是捕获的一份快照，也就是复制了一份引用供匿名内部类使用，如果在外部没有对object进行final修饰，就说明object随时可以再次赋值，那外部和内部的object就不一致了，所以必须final；但在Jdk8里，只要object没有重新被赋值，就不需要使用final修饰，其实编译器会自动帮你final，只是不需要我们手动写了。</span><br>    <span class="hljs-keyword">final</span> Object object = <span class="hljs-keyword">new</span> Object();<br>    InnerClass innerClass = <span class="hljs-keyword">new</span> OuterClass.InnerClass() &#123;<br>      <span class="hljs-meta">@Override</span><br>      <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(object.toString());<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 编译器定义的构造方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Client</span>$1 </span>&#123;<br>  <span class="hljs-comment">// Object object：捕获外部变量（自由变量）</span><br>  <span class="hljs-keyword">public</span> Client$<span class="hljs-number">1</span>(Object object) &#123;<br>    ...<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// 结论：</span><br><span class="hljs-comment">// 1、匿名内部类构造方法是通过编译器生成的</span><br><span class="hljs-comment">// 2、参数列表包括：</span><br><span class="hljs-comment">// 1. 外部对象（定义在非静态方法体内）</span><br><span class="hljs-comment">// 2. 父类的外部对象（父类非静态）</span><br><span class="hljs-comment">// 3. 父类的构造方法参数（父类有构造方法且参数列表不为空）</span><br><span class="hljs-comment">// 4. 外部捕获的变量（匿名内部类的方法体内有引用外部final变量）</span><br></code></pre></td></tr></table></figure><p>4、Lambda转换（SAM类型）</p><p>抽象类且只有单一方法，不能使用Lambda转换；接口类且只有单一方法，可以使用Lambda转换</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">CallBack</span> </span>&#123;<br>  void onSuccess()<br>&#125;<br><br><span class="hljs-comment">// 可以使用Lambda转换</span><br>CallBack callBack = () -&gt; &#123;<br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>题目结论：</p><ul><li>没有人类认知意义上的名字</li><li>只能继承一个父类或实现一个接口</li><li>父类是非静态的类型，则需父类外部实例来初始化</li><li>如果定义在非静态作用域内，会引用外部类实例</li><li>只能捕获外部作用域内的final变量</li><li>创建时只有单一方法的接口可以用Lambda转换</li></ul></li><li><p>三、怎样理解Java的方法分派？</p><p>面试官视角：这道题想考察什么？</p><ul><li>多态、虚方法表的认识</li><li>对编译和运行时的理解和认识</li><li>对Java语言规范和运行机制的深入认识</li><li>横向对比各类语言的能力<ul><li>Groovy，Gradle DSL 5.0以前唯一正式语言</li><li>C++，Native程序开发必备</li></ul></li></ul><p>题目剖析：</p><ul><li>怎样理解Java的方法分派？<ul><li>就是确定调用谁的、哪个方法</li><li>针对方法重载的情况进行分析</li><li>针对方法覆写的情况进行分析</li></ul></li></ul><blockquote><p>调用谁的：取决于调用者在运行时的实际类型。</p><p>调用哪个：取决于调用者在编译时的声明类型和参数类型是否一致。</p><ul><li>静态分派 - 方法重载分派<ul><li>编译期确定</li><li>依据调用者的声明类型和方法参数类型匹配分派</li></ul></li><li>动态分派 - 方法覆写分派<ul><li>运行时确定</li><li>依据调用者的实际类型分派</li></ul></li></ul></blockquote></li></ul><ul><li><p>四、Java泛型的实现机制是怎样的？</p><p>面试官视角：这道题想考察什么？</p><ul><li>对Java泛型是否仅停留在集合框架的使用</li><li>对Java泛型的实现机制的认知和理解</li><li>是否有足够的项目开发实战和“踩坑”经验</li><li>对泛型（或模版）编程是否有深入的对比研究</li><li>对常见的框架原理是否有过深入剖析</li></ul><p>题目剖析：</p><p>1、类型擦除从编译角度的细节</p><p>2、类型擦除对运行时的影响</p><p>3、类型擦除对反射的影响</p><p>4、对比类型不擦除的语言（C#）</p><p>5、为什么Java选择类型擦除</p><blockquote><p>类型擦除的优劣：</p><ul><li><p>类型擦除的好处：</p><ul><li>运行时内存负担小（因为编译之后都是一个类型，如List&lt;String&gt;类型，编译之后就是List类型）</li><li>兼容性好（Jdk1.5才推出泛型，因此类型擦除是为了顾及Jdk1.0到1.4的版本）</li></ul></li><li><p>类型擦除的问题：</p><ul><li><p>基本类型无法作为泛型实参（就有了装箱和拆箱的开销问题）</p></li><li><p>泛型类型无法用作方法重载（因为类型擦除了，不管形参是List&lt;String&gt; 还是 List&lt;Integer&gt;类型，编译之后都是List类型）</p></li><li><p>泛型类型无法当做真实类型使用（因为类型擦除了，编译之后，所有T类型都会转换成Object类型，那么直接new 一个 Object类型的话，其实这不是我们想要的类型，而我们想要的是T类型的实际类型，但Java并不能new出来，因为Java根本不知道这个T类型到底是个啥）</p></li><li><p>静态方法无法引用类泛型参数（因为类泛型参数只有在类实例化之后才知道，而静态方法根本不需要有类的实例，但静态方法可以声明泛型参数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GenericClass</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;R&gt; <span class="hljs-function">R <span class="hljs-title">max</span><span class="hljs-params">(R a, R b)</span> </span>&#123;...&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>类型强转的运行时开销（因为类型擦除，在运行时，字节码会将类型进行强转，这样你才能使用具体类型的方法）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">在Jdk &lt; <span class="hljs-number">1.5</span>：<br><br>List strings = <span class="hljs-keyword">new</span> ArrayList();<br>strings.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>String value = (String)strings.get(<span class="hljs-number">0</span>); <span class="hljs-comment">// 在代码中需要手动将类型进行强转，同时在字节码中也会将类型进行强转</span><br><br>在Jdk &gt;= <span class="hljs-number">1.5</span>：<br><br>List&lt;String&gt; strings = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>strings.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>String value = strings.get(<span class="hljs-number">0</span>); <span class="hljs-comment">// 在代码中我们使用了泛型，所以不需要手动将类型进行强转，但会在运行时的字节码中将类型进行强转，这是因为编译完成之后，类型被擦除了。</span><br></code></pre></td></tr></table></figure></li></ul></li></ul></blockquote><blockquote><p>知识迁移：Gson.fromJson为什么需要传入Class？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">fromJson</span><span class="hljs-params">(String json, Class&lt;T&gt; classOfT)</span> <span class="hljs-keyword">throws</span> JsonSyntaxException </span>&#123;<br>Object object = fromJson(json, (Type)classOfT);<br><span class="hljs-keyword">return</span> Primitives.wrap(classOfT).cast(object);<br>&#125;<br></code></pre></td></tr></table></figure><p>还是那句话，在Java中，泛型在编译之后，都会被擦除，你不传具体的类型，我怎么给你转成你想要的类型。</p></blockquote><blockquote><p>附加的签名信息（Signatures）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// SuperCalss有个泛型参数：T</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SupperClass</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;&#125;<br><br><span class="hljs-comment">// SubClass继承SuperClass，并将泛型参数确定为String</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SuperClass</span>&lt;<span class="hljs-title">String</span>&gt; </span>&#123;<br><span class="hljs-keyword">public</span> List&lt;Map&lt;String, Integer&gt;&gt; getValue() &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java">通过反射获取类泛型信息:<br>ParameterizedType superType = (ParameterizedType)SubClass.class.getGenericSuperClass();<br><span class="hljs-keyword">for</span>(Type actualTypeArgument : superType.getActrualTypeArguments()) &#123;<br>System.out.println(actualTypeArgument);<br>&#125;<br><br>通过发射获取方法泛型信息:<br>ParameterizedType methodType = (ParameterizedType)SubClass.class.getMethod(<span class="hljs-string">&quot;getValue&quot;</span>).getGenericReturnType();<br><span class="hljs-keyword">for</span>(Type type : methodType.getActrualTypeArguments()) &#123;<br>System.out.println(type);<br>&#125;<br><br>Tip：混淆时要保留签名信息<br>- keepattributes Signature<br></code></pre></td></tr></table></figure></blockquote><blockquote><p>知识迁移：使用泛型签名的两个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Gson:<br><br><span class="hljs-comment">// TypeToken，本身是用protected声明的类，不能直接new，但是可以用来构造匿名内部类，匿名内部类为什么可以直接被new出来，是因为子类可以访问父类的构造方法</span><br><span class="hljs-comment">// getType，里面调用的就是getGenericReturnType()，从而可以获取实际的泛型类型</span><br>Type collectionType = <span class="hljs-keyword">new</span> TypeToken&lt;Collection&lt;Integer&gt;&gt;()&#123;&#125;.getType();<br>Collection&lt;Integer&gt; ints = gson.fromJson(json, collectionType);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Retrofit:<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GithubServiceApi</span> </span>&#123;<br><span class="hljs-comment">// 通过接口返回的数据都是序列化后的信息，比如json、pb以及xml等，这些信息并没有携带类型的信息，而且我们知道Call&lt;User&gt;编译后，都会擦除类型，也就是说Call&lt;User&gt;会变成Call&lt;Object&gt;，那我们如何将其解析成对应的JavaBean呢？其实还是通过getGenericReturnType()进行发射，从而获取实际的泛型类型。</span><br><span class="hljs-meta">@Get(&quot;users/&#123;login&#125;&quot;)</span><br><span class="hljs-function">Call&lt;User&gt; <span class="hljs-title">getUserCallback</span><span class="hljs-params">(<span class="hljs-meta">@Path(&quot;login&quot;)</span>String login)</span></span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">Kotlin反射的实现原理:<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span></span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">com</span>/<span class="hljs-title">zane</span>/<span class="hljs-title">demo</span>/<span class="hljs-title">HelloWorld</span> </span>&#123;<br><span class="hljs-comment">//access flags 0x1</span><br><span class="hljs-keyword">public</span> &lt;<span class="hljs-keyword">init</span>&gt;()V<br><br>...<br><br><span class="hljs-meta">@LKotlin</span>/Metadata;(mv=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">13</span>&#125;, bv=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>&#125;, k=<span class="hljs-number">1</span>, d1=&#123;<span class="hljs-string">&quot;\u0000\u000c\n\u0002 ....&quot;</span>&#125;, d2=&#123;<span class="hljs-string">&quot;Lcom/zane/demo/HelloWorld;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, <span class="hljs-string">&quot;Chapter1_JavaBasics_main&quot;</span>&#125;)<br><span class="hljs-comment">//compiled from: HelloWorld.kt</span><br>&#125;<br><br>Kotlin是通过Metadata注解来实现反射的。<br><br>Tip：混淆时要保留签名信息(如果没有用到反射，就不需要注意了)<br>- keep <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">kotlin</span>.<span class="hljs-title">Metadata</span> </span>&#123;*;&#125;<br></code></pre></td></tr></table></figure></blockquote><p>题目结论：</p><ul><li>Java泛型采用类型擦除实现（Java的实现机制就是类型擦除）</li><li>类型编译时被擦除为Object，所以不兼容基本类型</li><li>类型擦除的实现方案主要考虑后向兼容</li><li>泛型类型签名信息特定场景下反射可获取</li></ul></li><li><p>五、Activity的onActivityResult使用起来非常麻烦，为什么不设计成回调？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否熟悉onActivityResult的用法</li><li>是否思考过用回调替代onActivityResult</li><li>是否实践过用回调替代onActivityResult</li><li>是否意识到回调存在的问题</li><li>是否能给出匿名内部类对外部类引用的解决方案</li></ul><p>题目剖析：</p><p>1、onActivityResult是干什么的，怎么用？</p><p>2、回调在这样的场景下适用吗？</p><p>3、如果适用，那为什么不用回调？</p><p>4、如果不适用，给出你的理由？</p><p><strong>干什么的：</strong>从A页面跳转到B页面时，如果希望B页面回到A页面时，携带一些数据回来，那么就可以使用onActivityResult。</p><p><strong>怎么用的：</strong></p><p>​    1、Activity A：startActivityForResult(intent, requestCode);</p><p>​    2、Activity B：setResult(resultCode, intent);</p><p>​    3、Activity A：覆写onActivityResult(requestCode, resultCode, data)方法</p><p><strong>存在的问题：</strong></p><p>​    1、代码处理逻辑分离，容易出现遗漏和不一致的问题（有时startActivityForResult和onActivityResult调用处不在一起，经常顾此失彼，容易出现遗漏）</p><p>​    2、写法不够直观，且结果数据没有类型安全保障（setResult里面的intent，装载的是个Bundle，类似于HashMap，因此只有看到setResult具体的代码，才能在onActivityResult中知道回传数据的具体类型）</p><p>​    3、结果种类较多时，onActivityResult就会逐渐臃肿难以维护</p><p><strong>为什么不直接使用回调：</strong></p><p>​    1、onActivityResult确实麻烦</p><p>​    2、CallBack确实也可以简化代码编写</p><p>​    3、但Activity的销毁和恢复机制不允许匿名内部类出现</p><blockquote><p>假设：用回调实现</p><p>在Activity A中，通过假设出来的回调实现去调用并启动Activity B：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">startActivityForResult(intent, <span class="hljs-keyword">new</span> onResultCallback()&#123;<br>...<br>&#125;);<br></code></pre></td></tr></table></figure><p>在Activity B中：</p><p>通常情况下，Activity B启动之后总会回到Activity A，但凡事总有意外，当Activity B长时间在栈顶，而Activity A因内存不足等原因被销毁了，这个时候Activity B通过setResult(resultCode, intent)返回时，系统会重新再new一个Activity A‘，但此时的 Activity A‘ 与之前的 Activity A是完全不同的两个实例了，而我们知道匿名内部类会引用外部类的实例，那么以下代码就会存在问题：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">start<span class="hljs-constructor">ActivityForResult(<span class="hljs-params">intent</span>, <span class="hljs-params">new</span> <span class="hljs-params">onResultCallback</span>()</span>&#123;<br>public void on<span class="hljs-constructor">Result(Bundle <span class="hljs-params">bundle</span>)</span> &#123;<br><span class="hljs-comment">// 在匿名内部类中使用外部类实例去更新组件时，就会存在问题，因为此时的mTextView是之前被销毁的Activiyt A 实例里面的mTextView成员，而不是现在的 Activity A‘ 实例里面的mTextView成员了，因此这行代码是无效的，不会起任何作用，也正是有这样的问题，所以不能直接使用回调。</span><br>mTextView.set<span class="hljs-constructor">Text(<span class="hljs-params">bundle</span>.<span class="hljs-params">getStringExtra</span>(<span class="hljs-string">&quot;key&quot;</span>)</span>);<br>&#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>转机：</p><p>基于注解处理器和Fragment的回调实现：</p><p>在Activity中创建一个空的Fragment并实现其回调，就算Activity和Fragment实例被销毁后重新创建了，也还是可以通过新的Fragment实例获取到新的Activity实例，在通过新的Activity实例去拿里面的mTextvView成员从而进行组件更新。</p><p>销毁被重新创建后，如何获取新的外部类实例的新的自由变量呢？因为自由变量在匿名内部类中只是一份快照，而它之前所依赖生存的外部类实例已经被销毁了，它也随之消耗，这个时候我们想找到新的外部类实例对应的新的自由变量，该怎么找呢？</p><p>通过id来找，也就是在Activity A启动Activity B的时候，将该自由变量的id存储起来，然后当Activity B返回Activity A‘ 的时候，在新的Fragment中，通过新的 Activity A‘ 的实例去findViewById来获取新的自由变量。</p><p>除了捕获View可以通过上面说的id来查找，那么Fragment如何找到新的呢？</p><p>捕获Fragment引用也可以类似通过字段mWho来替换，这个字段可以标识为唯一，但这个字段不是公开的，我们可以通过反射来获取到，然后去更新Fragment。</p></blockquote></li></ul><ul><li><p>六、如何停止一个线程？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否对线程的用法有了解</li><li>是否对线程的stop方法有了解</li><li>是否对线程stop过程中存在的问题有认识</li><li>是否熟悉interrupt中断的用法</li><li>是否能解释清楚使用boolean标志位的好处</li><li>是否知道interrupt底层的细节</li><li>通过该题目能够转移话题到线程安全，并阐述无误</li></ul><p>题目剖析：</p><p>1、<code>void stop()</code>、<code>void stop(Throwable obj)</code>，这两个线程停止的方法已经在Jdk1.1版本被废弃了，连同着暂停和继续的方法也被废弃了。</p><blockquote><p>为什么被废弃呢？因为直接停止线程是不安全的。</p><p>场景：</p><p>Thread1运行，对内存加锁写入中，此时Thread2也想访问这块内存，但它已经拿不到内存锁了，因为Thread1在访问，那么Thread2就会处于阻塞状态，等待内存锁释放，而此时Thread1被暂停了，但它仍持有内存锁，因此Thread2仍然处于阻塞状态，那暂停之后会不会恢复呢，不知道，如果不会恢复的话，那Thread2就得一直等着，这样就会导致一些运行上的问题，万一Thread2还持有了Thread1想要的锁，那就是死锁了。</p><p>此时情况又发生了变化，Thread1被直接停止了，那它会立即释放内存锁，根本没有缓冲的时间，直接停止，直接干掉，假如原本在内存中写入数据，写到一半被停止了，而此时Thread2将会获得内存锁，开始等待CPU的时间片，当获取到时间片访问内存时，发现内存状态异常，这是因为Thread1还没有执行完，就被停止了，留下了烂摊子给Thread2，那Thread2估计也得面临crash，正是因为有这种原因，官方就把线程停止的方法给废弃了，连同着暂停和继续的方法也被废弃了。</p></blockquote><p>  2、如何设计可以随时被中断而取消的任务线程？</p><p>  线程在设计过程中，主要是任务执行的设计，线程往往与任务是强绑定的，任务执行完了，线程也就结束了。虽然现在线程不能在执行过程中被直接停止，但任务的执行是可以停止的，所以线程的运行模式，其实是个协作的任务执行模式，我们想让线程结束，其目的是想要任务结束。</p><p>  因此在设计上，我们应该在任务上添加中断方式：</p><ul><li><p>interrupt</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">  目标线程：<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterruptableThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">try</span> &#123;<br>sleep(<span class="hljs-number">5000</span>);<br>&#125;<span class="hljs-keyword">catch</span>(InterruptedException e) &#123;<br>System.out.println(<span class="hljs-string">&quot;interrupted!&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br><br>中断通知：<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">interruptAThread</span><span class="hljs-params">()</span> </span>&#123;<br>  Thread thread = <span class="hljs-keyword">new</span> InterruptableThread();<br>  thread.start();<br>  <span class="hljs-keyword">try</span> &#123;<br>    Thread.sleep(<span class="hljs-number">2000</span>);<br>  &#125;<span class="hljs-keyword">catch</span>(InterruptedException e) &#123;<br>    e.printStackTrace();<br>  &#125;<br>  thread.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java">  interrupt有的情况也是不支持的！<br><br>目标线程：<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UninterruptableThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.run();<br>    <span class="hljs-comment">// 在for循环中，循环很多次的时候，是不支持interrupt的</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000</span>;i++) &#123;<br>      <span class="hljs-keyword">if</span>(i%<span class="hljs-number">10000</span> == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>中断通知：<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cannotInterruptAThread</span><span class="hljs-params">()</span> </span>&#123;<br>  Thread thread = <span class="hljs-keyword">new</span> UninterruptableThread();<br>  thread.start();<br>  thread.interrupt();<br>&#125;<br><br>想要支持interrupt，可以修改一下目标线程：<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterruptableThread1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.run();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000</span>;i++) &#123;<br>      <span class="hljs-comment">// 每次循环都调用一下interrupt()，确认有没有中断通知，如果收到中断通知了，这个时候我们也可以中断，也可以不中断，当然按照中断模式来的话，就停止任务，此时线程也就结束了</span><br>      <span class="hljs-comment">// 关于中断状态的读取，有两个方法：</span><br>      <span class="hljs-comment">// 1、interrupted()，是静态方法，获取当前线程的中断状态，并清空</span><br>      <span class="hljs-comment">// 1.1 当前运行的线程</span><br>      <span class="hljs-comment">// 1.2 中断状态调用后清空，重复调用后续返回false【thread.cc代码中：SetInterruptedLocked(false); // 清空当前中断状态】</span><br>      <span class="hljs-comment">//</span><br>      <span class="hljs-comment">// 2、isInterrupted()，是非静态方法，获取该线程的中断状态，不清空</span><br>      <span class="hljs-comment">// 2.1 调用的线程对象对应的线程</span><br>      <span class="hljs-comment">// 2.2 可重复调用，中断清空前一直返回true</span><br>      <span class="hljs-keyword">if</span>(interrupted()) &#123;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(i%<span class="hljs-number">10000</span> == <span class="hljs-number">0</span>) &#123;<br>        System.out.println(i);<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>中断通知：<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handleInterruptionThread</span><span class="hljs-params">()</span> </span>&#123;<br>  Thread thread = <span class="hljs-keyword">new</span> InterruptableThread1();<br>  thread.start();<br>  thread.interrupt();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>boolean标志位</p><p>其实interrupt代码逻辑底层也使用了boolean标志位，只是底层代码实现时还加了锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">  目标线程：<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InterruptableThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>  <span class="hljs-comment">// boolean isStopped = false; // 此时的isStopped没有加锁，会存在线程间可见性问题，就是在中断通知那里改了true，这里未必能看得到，这是因为Java的内存模型导致的。</span><br>  <span class="hljs-comment">// 为了保证线程间可见性，需要加一个volatile，告诉虚拟机，这个字段是易变的，易变的意思就是，哪里改了这个字段的内容，我这里就得看到。</span><br>  <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">boolean</span> isStopped = <span class="hljs-keyword">false</span>;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">super</span>.run();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">100000</span>;i++) &#123;<br>      <span class="hljs-keyword">if</span>(isStopped) &#123;<br>        <span class="hljs-keyword">return</span>;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><br>中断通知：<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">booleanFlag</span><span class="hljs-params">()</span> </span>&#123;<br>  InterruptableThread thread = <span class="hljs-keyword">new</span> InterruptableThread();<br>  thread.start();<br>  ...<br>  thread.isStopped = <span class="hljs-keyword">true</span>;<br>  ...<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>interrupt与boolean标志位对比</p><table><thead><tr><th></th><th>interrupt</th><th>boolean</th></tr></thead><tbody><tr><td>系统方法(sleep)</td><td>是</td><td>否</td></tr><tr><td>使用JNI</td><td>是</td><td>否</td></tr><tr><td>加锁</td><td>是</td><td>否</td></tr><tr><td>触发方式</td><td>抛异常</td><td>布尔值判断，也可抛异常</td></tr></tbody></table><ul><li><p>需要支持系统方法时用中断（功能性）</p><ul><li>其他情况用boolean标志位（性能）</li></ul></li></ul></li></ul><p>  题目结论：</p><ul><li>为什么线程不应该被直接stop？因为涉及到资源清理的问题，可能会给其它线程留下烂摊子。</li><li>线程内置中断机制的使用与原理：通过volatile、boolean标志位通知线程停止</li></ul></li><li><p>七、如何写出线程安全的程序？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否对线程安全有初步了解</li><li>是否对线程安全的产生原因有思考</li><li>是否知道final，volatile关键字的作用</li><li>是否清楚JDK 1.5之前Java DCL为什么有缺陷</li><li>是否清楚的知道如何编写线程安全的程序</li><li>是否对ThreadLocal的使用注意事项有认识</li></ul><p>题目剖析：</p><p>1、什么是线程安全问题？</p><blockquote><p>场景：</p><p>假如有三个线程在访问CPU和内存，它们分别为：Thread1、Thread2和Thread3，每一个线程都有一个自己的内存副本（工作内存1、工作内存2和工作内存3），内存副本其实就是Java的内存模型，此时这三个线程同时触发 ++ 运算，比如Thread1先去它自己对应的工作内存1中进行 ++ 运算，比如从5++到了6，此时主内存的数值还是5，其它两个线程对应的内存副本的数值也都还是5，那么问题来了，数值还没来得及同步呢，这个时候Thread2也对自己对应的工作内存2进行 ++ 运算，从5++到了6，这个时候可能是时间片的原因或其它原因，Thread1才把它的工作内存1的数据同步到主内存中，此时主内存的数值变成了6，接下来主内存发了一个指令，要把它自己的数值刷新到其它的内存副本中，这个时候Thread1、Thread2和Thread3对应的工作内存3的数值都变成了6，那么问题又来了，Thread2它自己已经完成了一次 ++ 运算，它本身已经从5++到了6了，按理来说Thread1和Thread2都已经进行 ++ 运算了，主内存的数值应该是7，但现在的结果却还是6，这是不是就出现了不一致的情况，再比如Thread3也进行了 ++ 运算，从6++到了7，这结果也不对，应该是8，因为这三个线程都进行了 ++ 运算，应该是从5+3=8，这就是线程安全问题。</p><p><strong>结论：线程安全问题本质上就是可变资源（内存）线程间共享的问题；不可变、不共享是没有线程安全问题的。</strong></p><p>扩展：进程有安全问题吗？</p><p>没有；因为进程之间只共享CPU时间片（抢时间片），进程之间的内存是相互独立的，一旦进程被kill了，其所拥有的内存都会还给物理内存，但线程是存在于进程当中的，同一个进程中的线程是可以共享内存资源的。</p></blockquote><p>2、如何实现线程安全？</p><ul><li><p>不共享资源</p><ul><li><p>可重入函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 可重入函数</span><br><span class="hljs-comment">// 什么是可重入函数：传入一个参数进来，经过一系列的运算，再返回一个值出去，中间不会涉及到任何的外部内存的访问、修改，这就叫可重入函数，它没有副作用。</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">addTwo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> num + <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>使用ThreadLocal</p><blockquote><p>上面的 ++ 运算的例子可以看出来，虽然在每一个线程当中都会去访问这个值（数值5），但最终访问的是自己的线程当中的内存副本里面的数值5。</p><p>比如下面的例子：</p><p>这个token的使用场景就是，一个服务器提供很多服务，每一个用户请求进来，都会开一个线程为他提供服务，所以每一个用户属于不同的线程，那么每一个线程去访问这个token，都是不一样的，都有一个属于自己的String类型的副本token，这样的话就不会互相干扰，这样的好处就是，因为不共享资源，所以没有线程安全的问题。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> ThreadLocal&lt;String&gt; token = <span class="hljs-keyword">new</span> ThreadLocal&lt;&gt;();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threadLocal</span><span class="hljs-params">()</span> </span>&#123;<br>  Runnable runnable = () -&gt; &#123;<br>    token.set(UUID.randomUUID().toString());<br>    ...<br>    System.out.println(<span class="hljs-string">&quot;e.&quot;</span> + Thread.currentThread().getName()+<span class="hljs-string">&quot;:&quot;</span>+token.get());<br>  &#125;;<br>  <br>  startThread(<span class="hljs-number">5</span>, runnable);<br>&#125;<br></code></pre></td></tr></table></figure><p>深入：ThreadLocal剖析（ThreadLocal.java）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">set</span><span class="hljs-params">(T value)</span> </span>&#123;<br>  Thread t = Thread.currentThread();<br>  ThreadLocalMap map = getMap(t);<br>  <span class="hljs-keyword">if</span>(map != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-comment">// key：this，就是ThreadLocal</span><br>    <span class="hljs-comment">// value：你想要传入的值</span><br>    map.set(<span class="hljs-keyword">this</span>, value);<br>  &#125;<span class="hljs-keyword">else</span> &#123;<br>    createMap(t, value);<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// ThreadLocalMap存在线程上的</span><br><span class="hljs-function">ThreadLocalMap <span class="hljs-title">getMap</span><span class="hljs-params">(Thread t)</span> </span>&#123;<br>  <span class="hljs-keyword">return</span> t.threadLocal;<br>&#125;<br><br><span class="hljs-comment">// 结论：ThreadLocal本质上是一个绑定在了线程上的一个ThreadLocalMap；如果我和你的线程不一样，那么值一定是不一样的。</span><br></code></pre></td></tr></table></figure><p>ThreadLoalMap 与 WeakHashMap：</p><table><thead><tr><th></th><th>ThreadLocalMap</th><th>WeakHashMap</th></tr></thead><tbody><tr><td>对象持有</td><td>弱引用</td><td>弱引用</td></tr><tr><td>对象GC回收</td><td>不影响</td><td>不影响</td></tr><tr><td>引用清除策略</td><td>1、主动移除<br />2、线程退出时移除</td><td>1、主动移除<br />2、GC 后移除（ReferenceQueue）</td></tr><tr><td>Hash冲突</td><td>开放定址法</td><td>单链表法</td></tr><tr><td>Hash计算</td><td>神奇数字的倍数</td><td>对象hashCode再散列</td></tr><tr><td>适用场景</td><td>对象较少</td><td>通用</td></tr></tbody></table><p>ThreadLocal的使用建议：</p><ul><li><p>声明为全局静态final成员</p><p>ThreadLocal在一个线程当中有一个实例就够了，没必要每次创建的时候都去弄一个出来，我们知道使用ThreadLocalMap对象set()的时候，它是以ThreadLocal为key的，所以如果不断的去变化ThreadLocal的对象引用的话，那些对象set()进去就永远找不到了；如果不声明为全局静态final成员的话，还有另外一个问题就是，可见性问题。</p></li><li><p>避免存储大量对象</p><p>这是由底层的数据结构决定的</p></li><li><p>用完后及时移除对象</p><p>因为ThreadLocal本身没有监听机制</p></li></ul></li></ul></li><li><p>共享不可变资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FinalFieldExample</span> </span>&#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> x;<br>  <span class="hljs-keyword">int</span> y;<br>  <br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">FinalFieldExample</span><span class="hljs-params">()</span> </span>&#123;<br>    x = <span class="hljs-number">3</span>;<br>    y = <span class="hljs-number">4</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> FinalFieldExample f;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span> </span>&#123;<br>  f = <span class="hljs-keyword">new</span> FinalFieldExample();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">reader</span><span class="hljs-params">()</span> </span>&#123;<br>  <span class="hljs-keyword">if</span>(f != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">int</span> i = f.x;<br>    <span class="hljs-keyword">int</span> j = f.y;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// writer 和 reader是两个线程</span><br><span class="hljs-comment">// 我们所期望的i 和 j的值是：i=3，j=4</span><br><span class="hljs-comment">// 但实际情况，有可能是i=3，j=0，这个取决于虚拟机的实现或者cpu的架构的特征，从而来决定指令会不会重排序，如果重排序的话，首先会将非final的成员，重排序到构造方法之外，如上面的示例，因为 x 是final的，所以 x 一定会在构造方法之内被赋值，但 y 是非final的，有可能构造方法执行完了，y的赋值操作还没有弄完，但在reader线程中，发现 f 已经不为null了，可以读值了，所以有可能 i=3，j=0的情况存在。</span><br><span class="hljs-comment">// 结论：被final修饰的变量、方法以及类，不仅不能被修改、不能被覆写、不能被继承，而且还禁止重排序。</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">static</span> Singleton singleton;<br>  <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Singleton</span><span class="hljs-params">()</span> </span>&#123;&#125;<br>  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title">getInstance</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 判断是否为null</span><br>    <span class="hljs-keyword">if</span>(singleton == <span class="hljs-keyword">null</span>) &#123;<br>      <span class="hljs-comment">// 是null，加锁</span><br>      <span class="hljs-keyword">synchronized</span>(Singleton.class) &#123;<br>        <span class="hljs-comment">// 再判断是否为null</span><br>        <span class="hljs-keyword">if</span>(singleton == <span class="hljs-keyword">null</span>) &#123;<br>          <span class="hljs-comment">// 还为null，开始初始化，先调用构造方法，再赋值给singleton</span><br>          singleton = <span class="hljs-keyword">new</span> Singleton();<br>        &#125;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> singleton;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// jdk1.5之后，volatile语义被增强了，除了保证线程间可见性，还有禁止重排序功能，所以写DCL（单例）的时候，把volatile加上。</span><br><span class="hljs-comment">// 上面的示例如果不加volatile的话，有可能出现类似于重排序的问题，可能在锁里面就把singleton给赋值了，但是构造方法还没执行完，那其它线程有可能就会拿到一个没有被初始化完的singleton的引用，这样就会引发问题。</span><br></code></pre></td></tr></table></figure></li><li><p>共享可变资源</p><ul><li><p>保证可见性（你改了，我看得到）</p><ul><li><p>使用final关键字</p></li><li><p>使用volatile关键字</p></li><li><p>加锁，锁释放时会强制将缓存刷新到主内存</p><p>加锁只是对另外跟你同样争用同一个锁的那些线程才能保证可见性，而且加锁的话，会在锁释放时强制将缓存刷新到主内存当中，这就是为什么其它线程加锁了才能看到我刷新到主内存的这个值，原因就在于，它只有加锁了，它才会去从主内存当中刷新，不然的话，它有可能就拿着自己的内存副本去读了（上面的 ++ 运算示例就是因为没有加锁、没有保证可见性也没有保证操作原子性）</p></li></ul></li><li><p>保证操作原子性（你在改，我就不能改，我在改，你就不能改；反例：上面的 ++ 运算，你改我也改）</p></li><li><p>加锁，保证操作的互斥性</p></li><li><p>使用CAS指令（如Unsafe.compareAndSwapInt）</p><p>  Unsafe不是公开的，需要用反射才能获取到</p></li><li><p>使用原子数值类型（如AtomicInteger）</p><ul><li>使用原子属性更新器（AtomicRerenceFieldUpdater）</li></ul></li><li><p>禁止重排序（加不加final，那执行顺序就是不一样）</p><ul><li>使用final关键字</li><li>使用volatile关键字</li></ul></li></ul></li></ul></li><li><p>八、ConcurrentHashMap如何支持并发访问？</p><p>面试官视角：这道题想考察什么？</p><ul><li>是否熟练掌握线程安全的概念</li><li>是否深入理解ConcurrentHashMap的各项并发优化的原理</li><li>是否掌握锁优化的方法</li></ul><p>题目剖析：</p><p>1、并发访问即考察线程安全问题</p><p>2、回答ConcurrentHashMap原理即可</p><p>3、如果你对ConcurrentHashMap的原理不了解</p><ul><li>分析下HashMap为什么不是线程安全的</li><li>编写并发程序时你会怎么做，举例说明最佳<ul><li>保证可见性</li><li>保证操作原子性</li><li>禁止重排序</li></ul></li></ul><p>4、CHM的并发优化历程</p><p>​    对于CHM的优化实质上是一个持续性的过程，从JDK1.5出现到JDK1.8之后，每个版本都没有停止过对其进行优化，甚至到JDK1.8有个特别大的改动，就是直接摒弃段。</p><ul><li><p>JDK 5：分段锁，必要时加锁</p><blockquote><p>分段加锁，著名的segment[]，不同段之间的访问实质上不受影响</p></blockquote></li><li><p>JDK 6：优化二次Hash算法</p><blockquote><p>针对Hash算法进行二次优化，hash算法到底优化了什么呢？首先我们看源码，hash(key)，这个key就是我们put进来的key，然后对它的hash值进行再一次的散列，拿到一个hashCode，这个值就是用于在普通的hashTable[]中找到相对应的位置，但是因为在JDK1.5中已经分段了，所以hash的值还需要用于在segment[]中找到相对应的位置，综合来说，就是先拿hash高位去segment[]中找位置，然后再用hash低位去hashTable[]中找位置，那么这个时候就要尽可能的保证segment和hashTable里面分布一定要均匀，不然的话，如果都堆到一个segment分段里面的话，你就会发现它退化成了一个hashTable，这就不合适了，所以JDK1.5存在什么问题呢？如果这个key是一个整数的话，你就会发现，它的hash值的高位对于3w多以下的整数得到的结果都是一样的，都是最后那一个segment，这样就达不到分段锁优化的目的了，而超过3w多到40w、50w的hash数值，它的高位也仍然在14到15之间，只有随着hash数值增加，高位才会慢慢的均匀分布在各个段里面，而JDK1.6对这个hash算法做了优化。</p><p>JDK1.5：hash值对于比较小的整数（3w多以下），它的Hash高位始终是15，这样的话就没有办法均匀的分布在各个段里面，因此它会退化成一个hashTable。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(Object x)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> h = x.hashCode();<br>    h += ~(h &lt;&lt; <span class="hljs-number">9</span>);<br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">14</span>);<br>    h += (h &lt;&lt; <span class="hljs-number">4</span>);<br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">10</span>);<br>    <span class="hljs-keyword">return</span> h;<br>&#125;<br></code></pre></td></tr></table></figure><p>JDK1.6：高位低位均匀分布，因为在JDK1.6中，启用了single-word Wang/Jenkins hash</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hash</span><span class="hljs-params">(<span class="hljs-keyword">int</span> h)</span> </span>&#123;<br><span class="hljs-comment">// single-word Wang/Jenkins hash</span><br>    h += ~(h &lt;&lt; <span class="hljs-number">15</span>) ^ <span class="hljs-number">0xffffcd7d</span>;<br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">10</span>);<br>    h += (h &lt;&lt; <span class="hljs-number">3</span>);<br>    h ^= (h &gt;&gt;&gt; <span class="hljs-number">6</span>);<br>    h += (h &lt;&lt; <span class="hljs-number">2</span>) + (h &lt;&lt; <span class="hljs-number">14</span>);<br>    <span class="hljs-keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);<br>&#125;<br></code></pre></td></tr></table></figure></blockquote></li><li><p>JDK 7：段懒加载，volatile &amp; cas（compareAndSet）</p><blockquote><p>JDk1.7之前，Segment会直接初始化，也就是当你创建CHM时，16个Segment会统统创建出来，而从JDK1.7开始，段没有一开始就实例化了，而是需要时才会去初始化，并且访问的时候也尽可能的使用volatile &amp; cas来避免加锁，假如此时第一个hash(key)被扔进来之后，它会放到第一个segment里面，其它的segment都不能放，因为只有使用时才会实例化，但实例化过程中会涉及到一个问题，就是segment的可见性的问题，比如ThreadA过来把这个segment实例化，ThreadB也同时过来访问这个segment的时候，有可能因为可见性的问题，访问不到这个刚刚被初始化的segment，也正是因为这一点，在JDk1.7里面，大量使用了对segment[]的volatile的一个访问，这个访问基于Unsafe类，它提供了volatile访问数组的能力，确保segment创建之后具备可见性。</p></blockquote></li><li><p>JDK 8：摒弃段，基于HashMap原理的并发实现</p><blockquote><p>直接摒弃段，通篇都是基于HashMap的一个改造，改造了对于一些不必加锁的地方，尽量使用volatile进行访问，一些实在没有办法需要加锁的地方，比如写入的操作，也尽量选择一个很小的范围去加锁。</p><p>JDK1.7，我们是说使用volatile访问segment[]，在JDK1.8中摒弃段（segment），直接使用volatile访问hashTable。</p></blockquote></li></ul><p>5、CHM如何计数</p><ul><li>JDK5~7基于段元素个数求和，二次不同就加锁</li><li>JDK8引入CounterCell，本质上也是分段计数</li></ul><p>6、CHM是弱一致性的</p><ul><li><p>添加元素后不一定马上能读到</p><blockquote><p>有可能，我添加的时候，你已经读过去了</p></blockquote></li><li><p>清空之后可能仍然会有元素</p><blockquote><p>我是一段一段的清，有可能我刚刚清理了这段，你又添加进来了</p></blockquote></li><li><p>遍历之前的段元素的变化会读到</p><blockquote><p>如果我还没有遍历到段15，我现在正在遍历段14，你在段15里面做了修改，待会我遍历到段15时就会感觉到段15发生了变化</p></blockquote></li><li><p>遍历之后的段元素变化读不到</p><blockquote><p>如果我遍历到了段14，但你对段13做了修改，那么我就感觉不到了</p></blockquote></li><li><p>遍历时元素发生变化不抛异常</p><blockquote><p>因为遍历是经常发生的</p></blockquote></li></ul><p>7、HashTable的问题</p><p>​    HashTable虽然是线程安全的，但是它非常的粗暴和野蛮，因为你想修改它、想读取它都需要拿锁。</p><ul><li>大锁：对HashTable对象加锁</li><li>长锁：直接对方法加锁</li><li>读写锁共用：只有一把锁，从头锁到尾</li></ul><p>8、针对HashTable的问题，CHM的解法</p><ul><li>小锁：分段锁（JDK5~7），桶节点锁（JDK8）</li><li>短锁：先尝试获取，失败再加锁</li><li>分离读写锁：读失败再加锁（JDK5<del>7），volatile读、CAS（compareAndSet）写（JDK7</del>8）</li></ul><p>9、如何进行锁优化？</p><ul><li><p>长锁不如短锁：尽可能只锁必要的部分</p></li><li><p>大锁不如小锁：尽可能对加锁的对象拆分</p><blockquote><p>HashTable就是典型的大锁，它的锁是直接加到类上面的</p></blockquote></li><li><p>公锁不如私锁：尽可能将锁的逻辑放到私有代码中</p><blockquote><p>尽可能将锁的逻辑放到私有代码中，对外暴露的时候，其实不要让它看到锁，因为如果说外面访问的时候，让它加锁的话，可能会给它的使用带来不必要的麻烦，甚至带来一些错误，因为外部使用的时候，也许不知道你内部的一些逻辑，有可能在使用的过程中，锁不正当的使用，导致死锁也是有可能的。</p></blockquote></li><li><p>嵌套锁不如扁平锁：尽可能在代码设计时避免锁嵌套</p><blockquote><p>这样也能避免逻辑上出现问题，或者出现死锁的情况发生</p></blockquote></li><li><p>分离读写锁：尽可能将读锁和写锁分离</p><blockquote><p>因为大多数的的情况，都在读，只有少部分的时间在写，那么这个时候的话，写可能需要加一个比较重的锁，而读的话，有可能volatile就足够了，甚至不加锁也可以。</p></blockquote></li><li><p>粗化高频锁：尽可能合并处理频繁过短的锁</p><blockquote><p>如果你有一段代码，它被拆成了很多小段，每一小段都加了锁，那么我们知道每加一把锁，它都需要一些开销，如果你这个地方加锁和释放锁的频率特别高，那么就要考虑把它们合并到一块，减少一次性加锁的开销。</p></blockquote></li><li><p>消除无用锁：尽可能不加锁，或用volatile替代锁</p></li></ul></li></ul><ul><li><p>九、AtomicReference和AtomicReferenceFieldUpdater有何异同？</p><p>面试官视角：这道题想考察什么？</p><ul><li><p>是否熟练掌握原子操作的概念</p><blockquote><p>线程安全问题涉及到操作原子性的概念</p></blockquote></li></ul></li><li><p>是否熟悉AR和ARFU这两个类的用法和原理</p></li><li><p>是否对Java对象的内存占用有认识</p></li><li><p>是否有较强的敏感度和深入探究的精神</p><p>题目剖析：</p><p>1、AtomicReference的用法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicReferenceValueHolder</span> </span>&#123;<br>    AtomicReference&lt;String&gt; atomicValue = <span class="hljs-keyword">new</span> AtomicReference&lt;&gt;(<span class="hljs-string">&quot;HelloAtomic&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">  AtomicReferenceValueHolder holder = <span class="hljs-keyword">new</span> AtomicReferenceValueHolder();<br>  <span class="hljs-comment">// compareAndSet（cas）：本质上是使用的Unsafe类提供的CAS能力</span><br>  <span class="hljs-comment">// 如果是“Hello”那么就改成“World”</span><br>  holder.atomicValue.compareAndSet(<span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>);<br>String value = holder.atomicValue.getAndUpdate(<span class="hljs-keyword">new</span> UnaryOperator&lt;String&gt;()&#123;<br>  <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(String s)</span> </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>      &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>  2、AtomicReferenceFieldUpdater的用法</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleValueHolder</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicReferenceFieldUpdater&lt;SimpleValueHolder, String&gt; valueUpdater = AtomicReferenceFieldUpdater.newUpdater(SimpleValueHolder.class, String.class, <span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-keyword">volatile</span> String value = <span class="hljs-string">&quot;HelloAtomic&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">  SimpleValueHolder holder = <span class="hljs-keyword">new</span> SimpleValueHolder();<br>  SimpleValueHolder.valueUpdater.compareAndSet(holder, <span class="hljs-string">&quot;Hello&quot;</span>, <span class="hljs-string">&quot;World&quot;</span>);<br>String value = SimpleValueHolder.valueUpdater.getAndUpdate(holder, <span class="hljs-keyword">new</span> UnaryOperator&lt;String&gt;()&#123;<br>      <span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">apply</span><span class="hljs-params">(String s)</span> </span>&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HelloWorld&quot;</span>;<br>      &#125;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>3、AR和ARFU的对比</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AtomicReferenceValueHolder</span> </span>&#123;<br>    AtomicReference&lt;String&gt; atomicValue = <span class="hljs-keyword">new</span> AtomicReference&lt;&gt;(<span class="hljs-string">&quot;HelloAtomic&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleValueHolder</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> AtomicReferenceFieldUpdater&lt;SimpleValueHolder, String&gt; valueUpdater = AtomicReferenceFieldUpdater.newUpdater(SimpleValueHolder.class, String.class, <span class="hljs-string">&quot;value&quot;</span>);<br>    <span class="hljs-keyword">volatile</span> String value = <span class="hljs-string">&quot;HelloAtomic&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>发现AR比ARFU写起来的时候代码量要少得多，而且AR不用像ARFU一样需要用到反射，但是很多框架却选择使用ARFU，我们查看源码发现，AR源码里面，本质也有一个<code>private volatile V value;</code> 存在，那么这两者的差异点主要在于AR本身是要指向一个对象的，也就是要比ARFU多创建一个对象，而这个对象的头（Header）占12个字节，它的成员（Fields）占4个字节，也就比ARFU要多出来16个字节，这是对于32位的是这种情况，如果是64位的话，你启用了<code>-XX:+UseComparessedOops</code> 指针压缩的话，那么Header还是占用12个字节，Fields也还是占用4个字节，但如果没有启用指针压缩的话，那么Header是占16个字节，Fields占用8个字节，总共占用24个字节，那么就说明每创建一个AR都会多出来这么多的内存，那么对GC的压力就有很大的影响了。</p></blockquote><p>  4、迁移：使用ARFU的例子(1)</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BufferedInputSteam</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">FilterInputStream</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">volatile</span> <span class="hljs-keyword">byte</span>[];<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> AtomicReferenceFieldUpdater&lt;BufferedInputStream, <span class="hljs-keyword">byte</span>[]&gt; bufUpdater = AtomicReferenceFieldUpdater.newUpdater(BufferedInputStream.class, <span class="hljs-keyword">byte</span>[].class, <span class="hljs-string">&quot;buf&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>  5、迁移：使用ARFU的例子(2)</p>  <figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// lazy有几种线程安全的模式，比如同步的、默认不是线程安全的等等</span><br><span class="hljs-keyword">val</span> value <span class="hljs-keyword">by</span> lazy(LazyThreadSafetyMode.PUBLICATION) &#123;<br>    ...<br>&#125;<br><br><span class="hljs-comment">// PUBLICATION的实现就用到了ARFU</span><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SafePublicationLazyImpl</span>&lt;<span class="hljs-type">out T</span>&gt;</span>(initializer:() -&gt; T):Lazy&lt;T&gt;,Serializable &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> value:T<br>    <span class="hljs-keyword">get</span>() &#123;<br>            ...<br>            <span class="hljs-keyword">val</span> newValue = initializerValue()<br>            <span class="hljs-keyword">if</span>(valueUpdater.compareAndSet(<span class="hljs-keyword">this</span>, UNINITIALIZED_VALUE, newValue)) &#123;<br>                ...<br>            &#125;<br>            ...<br>        &#125;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> valueUpdater = AtomicReferenceFieldUpdater.newUpdater(...)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>  题目结论：</p><ul><li><p>AR和ARFU的功能一致，原理相同，都是基于Unsafe的CAS操作</p></li><li><p>AR通常作为对象的成员使用，占16B（指针压缩）或24B（指针不压缩），取决于多少位的虚拟机以及有没有开启指针压缩</p></li><li><p>ARFU通常作为类的静态成员使用，对实例成员进行修改，这样做的作用就是节省内存</p></li><li><p>AR使用更友好，ARFU更适合类实例比较多的场景（比如写网络框架的时候肯定会用到ARFU）</p></li><li><p>Kotlin协程的实现，因为也是需要对这个结果保证操作原子性的，所以它的实现也用到了ARFU</p></li><li><p>十、如何在Android中写出优雅的异步代码？</p><p>- </p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo从入门到放弃</title>
    <link href="/2021/04/16/Hexo%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <url>/2021/04/16/Hexo%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    
    <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><span id="more"></span><h3 id="一、Hexo搭建流程（Windows篇）"><a href="#一、Hexo搭建流程（Windows篇）" class="headerlink" title="一、Hexo搭建流程（Windows篇）"></a>一、Hexo搭建流程（Windows篇）</h3><h4 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h4><p>Windows：下载并安装<a href="https://git-scm.com/download/win">Git</a>，安装成功之后，打开 Git Bash 或 cmd 命令行工具，使用 <code>git --version</code> 命令来查看版本，从而检测是否安装成功。</p><h4 id="2、安装Node-js"><a href="#2、安装Node-js" class="headerlink" title="2、安装Node.js"></a>2、安装Node.js</h4><ul><li><p>下载安装Node.js</p><p>Windows：下载并安装<a href="https://nodejs.org/en/download/">Node.js</a>，安装成功之后，打开 Git Bash 或 cmd 命令行工具，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ node -v<br>v14<span class="hljs-number">.16</span><span class="hljs-number">.1</span> <span class="hljs-comment">// 显示版本就说明安装成功</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ npm -v<br><span class="hljs-number">6.14</span><span class="hljs-number">.12</span> <span class="hljs-comment">// 显示版本就说明安装成功</span><br></code></pre></td></tr></table></figure><p>Tip：新版Node.js已自带npm，安装Node.js时npm会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装、卸载Node.js需要或不需要的东西。</p></li><li><p>环境配置</p><p>环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，不会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，则不会占用C盘空间。</p><p>因此我们希望将全局模块所在路径和缓存路径，放在之前Node.js安装的文件夹中，则需要在该文件夹【D:\Development_Tools\nodejs】下创建两个文件夹【node_global】及【node_cache】，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417085751925.png" alt="image-20210417085751925"></p><p>创建完两个空文件夹之后，打开 Git Bash 或 cmd 命令行工具，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ npm config set prefix <span class="hljs-string">&quot;D:\Development_Tools\nodejs\node_global&quot;</span> <span class="hljs-comment">// 替换成读者自己的路径</span><br>$ npm config set cache <span class="hljs-string">&quot;D:\Development_Tools\nodejs\node_cache&quot;</span> <span class="hljs-comment">// 替换成读者自己的路径</span><br></code></pre></td></tr></table></figure><p>接下来，设置系统环境变量，依次打开 ”我的电脑” - 右键 - “属性” - “高级系统设置” - “高级” - “环境变量”。</p><p>进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Develop\nodejs\node_global\node_modules】，点击确定，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417091008495.png" alt="image-20210417091008495"></p><p>然后将【用户变量】下的【Path】修改为【D:\Development_Tools\nodejs\node_global】，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417091859176.png" alt="image-20210417091859176"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417092030924.png" alt="image-20210417092030924"></p></li><li><p>测试</p><p>配置完成之后，安装一个最常用的express模块，打开 Git Bash 或 cmd 命令行工具，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ npm install express -g <span class="hljs-comment">// -g表示全局安装模块的意思</span><br></code></pre></td></tr></table></figure><p>Tip：如果安装时不加 -g 参数，则安装的模块将会安装在当前命令行的路径【C:\Users\Administrator】下的【node_modules】文件夹中，如果【node_modules】文件夹不存在，则会自动生成，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417093339070.png" alt="image-20210417093339070"></p></li></ul><h4 id="3、安装Hexo"><a href="#3、安装Hexo" class="headerlink" title="3、安装Hexo"></a>3、安装Hexo</h4><p>Git 和 Nodejs 安装好之后，就可以安装Hexo了，先创建一个文件夹【blog】，文件夹名称随意，然后在该文件夹下直接右键打开 Git Bash 命令行工具，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>安装成功之后，使用 <code>hexo -v</code> 命令查看一下版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">$ hexo -v<br>    <br><span class="hljs-comment">// 有以下信息，说明Hexo安装成功</span><br>hexo-cli: <span class="hljs-number">4.2</span><span class="hljs-number">.0</span><br>os: Windows_NT <span class="hljs-number">10.0</span><span class="hljs-number">.17134</span> win32 x64<br>node: <span class="hljs-number">14.16</span><span class="hljs-number">.1</span><br>v8: <span class="hljs-number">8.4</span><span class="hljs-number">.371</span><span class="hljs-number">.19</span>-node<span class="hljs-number">.18</span><br>uv: <span class="hljs-number">1.40</span><span class="hljs-number">.0</span><br>zlib: <span class="hljs-number">1.2</span><span class="hljs-number">.11</span><br>brotli: <span class="hljs-number">1.0</span><span class="hljs-number">.9</span><br>ares: <span class="hljs-number">1.16</span><span class="hljs-number">.1</span><br>modules: <span class="hljs-number">83</span><br>nghttp2: <span class="hljs-number">1.41</span><span class="hljs-number">.0</span><br>napi: <span class="hljs-number">7</span><br>llhttp: <span class="hljs-number">2.1</span><span class="hljs-number">.3</span><br>openssl: <span class="hljs-number">1.1</span>.1k<br>cldr: <span class="hljs-number">37.0</span><br>icu: <span class="hljs-number">67.1</span><br>tz: 2020a<br>unicode: <span class="hljs-number">13.0</span><br></code></pre></td></tr></table></figure><h4 id="4、初始化Hexo"><a href="#4、初始化Hexo" class="headerlink" title="4、初始化Hexo"></a>4、初始化Hexo</h4><p>接下来，初始化Hexo，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">$ hexo init myblog <span class="hljs-comment">// myblog文件夹名称随意</span><br><br><span class="hljs-comment">// 有以下信息，说明初始化Hexo成功</span><br>INFO  Cloning hexo-starter https:<span class="hljs-comment">//github.com/hexojs/hexo-starter.git</span><br>INFO  Install dependencies<br>added <span class="hljs-number">190</span> packages from <span class="hljs-number">160</span> contributors and audited <span class="hljs-number">196</span> packages in <span class="hljs-number">22.</span>185s<br><br><span class="hljs-number">15</span> packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br>found <span class="hljs-number">0</span> vulnerabilities<br><br>INFO  Start blogging with Hexo!<br></code></pre></td></tr></table></figure><p>然后进入这个【myblog】文件夹，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">$ cd myblog<br>$ npm install<br><br><span class="hljs-comment">// 有以下信息， 说明npm安装成功</span><br>npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@<span class="hljs-number">2.3</span><span class="hljs-number">.2</span> (node_modules\fsevents):<br>npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform <span class="hljs-keyword">for</span> fsevents@<span class="hljs-number">2.3</span><span class="hljs-number">.2</span>: wanted &#123;<span class="hljs-string">&quot;os&quot;</span>:<span class="hljs-string">&quot;darwin&quot;</span>,<span class="hljs-string">&quot;arch&quot;</span>:<span class="hljs-string">&quot;any&quot;</span>&#125; (current: &#123;<span class="hljs-string">&quot;os&quot;</span>:<span class="hljs-string">&quot;win32&quot;</span>,<span class="hljs-string">&quot;arch&quot;</span>:<span class="hljs-string">&quot;x64&quot;</span>&#125;)<br><br>added <span class="hljs-number">5</span> packages from <span class="hljs-number">1</span> contributor and audited <span class="hljs-number">196</span> packages in <span class="hljs-number">2.</span>355s<br><br><span class="hljs-number">15</span> packages are looking <span class="hljs-keyword">for</span> funding<br>  run `npm fund` <span class="hljs-keyword">for</span> details<br><br>found <span class="hljs-number">0</span> vulnerabilities<br></code></pre></td></tr></table></figure><p>至此初始化Hexo以及安装npm皆已完成，在【myblog】文件夹中将有如下内容：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417103951474.png" alt="image-20210417103951474"></p><p>然后在 Git Bash 命令行工具中，通过以下命令就可以打开Hexo的服务了：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g<br><span class="hljs-variable">$ </span>hexo server<br></code></pre></td></tr></table></figure><p>接下来在浏览器上输入 <a href="http://localhost:4000/">http://localhost:4000/</a> ，就可以看到自己生成的博客了，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417104241734.png" alt="image-20210417104241734"></p><h4 id="5、Github创建个人仓库"><a href="#5、Github创建个人仓库" class="headerlink" title="5、Github创建个人仓库"></a>5、Github创建个人仓库</h4><ul><li><p>注册Github账号</p><p>首先要有一个Github账号，如果没有就先注册一个，不寒碜！</p></li><li><p>新建仓库</p><p>完成注册并登录后，在Github上， New respository，新建仓库，如图所示：</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\image-20210417110738486.png" alt="image-20210417110738486"></p><p>Tip：创建一个和用户名相同的仓库，只有这样将来要部署到GitHub pages的时候才会被识别，也就是xxx.github.io，其中xxx就是你注册GitHub的用户名。</p></li></ul><h4 id="6、生成SSH添加到Github"><a href="#6、生成SSH添加到Github" class="headerlink" title="6、生成SSH添加到Github"></a>6、生成SSH添加到Github</h4><p>打开 Git Bash 命令行工具，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">$ git config --global user.name <span class="hljs-string">&quot;yourname&quot;</span><br>$ git config --global user.email <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>Tip：yourname输入你的GitHub用户名，youremail输入你的GitHub邮箱。</p><p>然后通过以下命令，检测是否输入正确：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ git config <span class="hljs-keyword">user</span>.name<br>$ git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure><p>接下来，创建SSH，输入以下命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail&quot;</span><br></code></pre></td></tr></table></figure><p>然后在Github的Settings中，点击 SSH and GPG keys，然后点击 New SSH key，把刚刚生成的 <code>id_rsa.pub</code> 文件里面的信息复制进去即可。</p><p>打开 Git Bash 命令行工具，输入以下命令，查看是否配置成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ ssh -T git<span class="hljs-meta">@github</span>.com<br></code></pre></td></tr></table></figure><h4 id="7、将Hexo部署到Github"><a href="#7、将Hexo部署到Github" class="headerlink" title="7、将Hexo部署到Github"></a>7、将Hexo部署到Github</h4><p>想要Hexo和GitHub关联起来，就需要将Hexo生成的静态文件部署到GitHub上。</p><p>首先，打开站点配置文件 <code>_config.yml</code>，滚动到最后，修改其中代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">deploy:<br>  type: git<br>  repo: https:<span class="hljs-comment">//github.com/YourgithubName/YourgithubName.github.io.git</span><br>  branch: master<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">url: https:<span class="hljs-comment">//xxx.github.io // 将Github创建的项目名称设置为url</span><br></code></pre></td></tr></table></figure><p>然后，打开 Git Bash 命令行工具，输入以下命令，来安装 deploy-git，这样日后就可以用命令将Hexo生成的静态文件部署到GitHub上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">$ npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p>最后，输入以下命令，将Hexo生成的静态文件部署到Github上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">$ hexo clean<br>$ hexo g<br>$ hexo d<br></code></pre></td></tr></table></figure><h3 id="二、Hexo基本配置"><a href="#二、Hexo基本配置" class="headerlink" title="二、Hexo基本配置"></a>二、Hexo基本配置</h3><h4 id="1、设置主题"><a href="#1、设置主题" class="headerlink" title="1、设置主题"></a>1、设置主题</h4><h4 id="2、发布文章"><a href="#2、发布文章" class="headerlink" title="2、发布文章"></a>2、发布文章</h4><h3 id="三、设置个人域名"><a href="#三、设置个人域名" class="headerlink" title="三、设置个人域名"></a>三、设置个人域名</h3>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kotlin入门到放弃</title>
    <link href="/2021/04/16/kotlin%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/"/>
    <url>/2021/04/16/kotlin%E5%85%A5%E9%97%A8%E5%88%B0%E6%94%BE%E5%BC%83/</url>
    
    <content type="html"><![CDATA[<h2 id="Kotlin入门到放弃"><a href="#Kotlin入门到放弃" class="headerlink" title="Kotlin入门到放弃"></a>Kotlin入门到放弃</h2><h3 id="零、Kotlin是什么？"><a href="#零、Kotlin是什么？" class="headerlink" title="零、Kotlin是什么？"></a>零、Kotlin是什么？</h3><p>Kotlin就是一门可以运行在Java虚拟机、Android、浏览器上的静态语言，它与Java100%兼容，如果你对Java非常熟悉，那么你就会发现Kotlin除了自己的标准库之外，大多仍然使用经典的Java集合框架。</p><h3 id="一、基本数据类型"><a href="#一、基本数据类型" class="headerlink" title="一、基本数据类型"></a>一、基本数据类型</h3><h4 id="1-byte类型定义"><a href="#1-byte类型定义" class="headerlink" title="1. byte类型定义"></a>1. byte类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义格式：val / var 变量名: 类型 = 值</span><br><span class="hljs-keyword">val</span> byte: <span class="hljs-built_in">Byte</span> = <span class="hljs-number">1</span> <span class="hljs-comment">// 8位，最大存储数据量是255，存放的数据范围是-128~127之间</span><br><br><span class="hljs-comment">// 定义格式：val / var 变量名 = 值</span><br><span class="hljs-keyword">val</span> byte = <span class="hljs-number">1</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="2-short类型定义"><a href="#2-short类型定义" class="headerlink" title="2. short类型定义"></a>2. short类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> short: <span class="hljs-built_in">Short</span> = <span class="hljs-number">2</span> <span class="hljs-comment">// 16位，最大数据存储量是65536，数据范围是-32768~32767之间</span><br><br><span class="hljs-keyword">val</span> short = <span class="hljs-number">2</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="3-char类型定义"><a href="#3-char类型定义" class="headerlink" title="3. char类型定义"></a>3. char类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> char: <span class="hljs-built_in">Char</span> = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-comment">// 16位，存储Unicode码，用单引号赋值</span><br><br><span class="hljs-keyword">val</span> char = <span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="4-int类型定义"><a href="#4-int类型定义" class="headerlink" title="4. int类型定义"></a>4. int类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> number: <span class="hljs-built_in">Int</span> = <span class="hljs-number">668</span> <span class="hljs-comment">// 32位，最大数据存储容量是2的32次方减1，数据范围是负的2的31次方到正的2的31次方减1</span><br><br><span class="hljs-keyword">val</span> number = <span class="hljs-number">668</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="5-float类型定义"><a href="#5-float类型定义" class="headerlink" title="5. float类型定义"></a>5. float类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> float: <span class="hljs-built_in">Float</span> = <span class="hljs-number">0.5f</span> <span class="hljs-comment">// 32位，数据范围在3.4e-45~1.4e38，直接赋值时必须在数字后加上f或F</span><br><br><span class="hljs-keyword">val</span> float = <span class="hljs-number">0.5f</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="6-double类型定义"><a href="#6-double类型定义" class="headerlink" title="6. double类型定义"></a>6. double类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> double: <span class="hljs-built_in">Double</span> = <span class="hljs-number">0.5</span> <span class="hljs-comment">// 64位，数据范围在4.9e-324~1.8e308，赋值时可以加d或D也可以不加</span><br><br><span class="hljs-keyword">val</span> double = <span class="hljs-number">0.5</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="7-long类型定义"><a href="#7-long类型定义" class="headerlink" title="7. long类型定义"></a>7. long类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> long: <span class="hljs-built_in">Long</span> = <span class="hljs-number">123456</span> <span class="hljs-comment">// 64位，最大数据存储容量是2的64次方减1，数据范围为负的2的63次方到正的2的63次方减1</span><br><br><span class="hljs-keyword">val</span> long = <span class="hljs-number">123456</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h4 id="8-boolean类型定义"><a href="#8-boolean类型定义" class="headerlink" title="8. boolean类型定义"></a>8. boolean类型定义</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> bool: <span class="hljs-built_in">Boolean</span> = <span class="hljs-literal">true</span> <span class="hljs-comment">// 只有true和false两个取值</span><br><br><span class="hljs-keyword">val</span> bool = <span class="hljs-literal">true</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h3 id="二、引用数据类型"><a href="#二、引用数据类型" class="headerlink" title="二、引用数据类型"></a>二、引用数据类型</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义格式：val / var 变量名: 类型 = 值</span><br><span class="hljs-keyword">val</span> str: String = <span class="hljs-string">&quot;Kotlin Day01&quot;</span><br><br><span class="hljs-comment">// 定义格式：val / var 变量名 = 值</span><br><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;Kotlin Day01&quot;</span> <span class="hljs-comment">// 自动推导类型</span><br></code></pre></td></tr></table></figure><h3 id="三、常量和变量"><a href="#三、常量和变量" class="headerlink" title="三、常量和变量"></a>三、常量和变量</h3><ul><li>val：定义常量，不可修改的</li><li>var：定义变量，可以修改的</li></ul><h3 id="四、编译时常量和运行时常量"><a href="#四、编译时常量和运行时常量" class="headerlink" title="四、编译时常量和运行时常量"></a>四、编译时常量和运行时常量</h3><ul><li>val：运行时常量（类似于Java中的final）</li><li>const val：编译时常量</li></ul><p>Java的final：不可修改，编译时会把引用的值进行复制（编译时能确切知道赋值的具体内容）</p><p>Kotlin的val：不可修改，编译时不会把引用的值进行复制，属于运行时常量（因为编译时不能确切知道赋值的具体内容，故而不能进行赋值）；而在val前面加const，就相当于Java中的final，编译时会把引用的值进行复制，属于编译时常量（编译时能确切知道赋值的具体内容）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 在class之外定义</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> TAG = <span class="hljs-string">&quot;MainActivity&quot;</span><br></code></pre></td></tr></table></figure><h3 id="五、函数的定义"><a href="#五、函数的定义" class="headerlink" title="五、函数的定义"></a>五、函数的定义</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义格式：fun 函数名(参数1: 数据类型,...,参数N: 数据类型): 返回值数据类型 &#123;&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(number1:<span class="hljs-type">Int</span>, number2:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> number1 + number2<br>&#125;<br><br>等价于：<br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(number1:<span class="hljs-type">Int</span>, number2:<span class="hljs-type">Int</span>)</span></span> = number1 + number2<br></code></pre></td></tr></table></figure><h3 id="六、函数变量（匿名函数）"><a href="#六、函数变量（匿名函数）" class="headerlink" title="六、函数变量（匿名函数）"></a>六、函数变量（匿名函数）</h3><p>在Kotlin中函数可以作为变量，也可以作为参数传递。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义格式：val/var = fun(参数1: 数据类型,...,参数N: 数据类型): 返回数据类型 &#123;&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">val</span> calc = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(number1:<span class="hljs-type">Int</span>, number2:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">return</span> number1 - number2<br>&#125;<br><br>等价于：<br><span class="hljs-keyword">val</span> calc = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(number1:<span class="hljs-type">Int</span>, number2:<span class="hljs-type">Int</span>)</span></span> = number1 - number2<br></code></pre></td></tr></table></figure><h3 id="七、Lambda初探"><a href="#七、Lambda初探" class="headerlink" title="七、Lambda初探"></a>七、Lambda初探</h3><p>Lambda表达式就是一个匿名函数</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Lambda表达式：&#123; 函数入口参数 -&gt; 返回值 &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">val</span> calcLambda = &#123; number1:<span class="hljs-built_in">Int</span>, number2:<span class="hljs-built_in">Int</span> -&gt; number1 - number2 &#125;<br><br><span class="hljs-comment">// 如果没有入参也没有返回值，则可如下所示：</span><br><span class="hljs-keyword">val</span> printHello = &#123;<br>    println(<span class="hljs-string">&quot;Hello World&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// Lambda返回值是以函数体的最后一行代码作为返回值</span><br><span class="hljs-keyword">val</span> sum = &#123; arg1:<span class="hljs-built_in">Int</span>, arg2:<span class="hljs-built_in">Int</span> -&gt;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$arg1</span> + <span class="hljs-variable">$arg2</span> = <span class="hljs-subst">$&#123;arg1 + arg2&#125;</span>&quot;</span>)<br>    arg1 + arg2 <span class="hljs-comment">// 作为Lambda的返回值返回</span><br>&#125;<br><br><span class="hljs-comment">// Lambda表达式的调用</span><br>sum(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br>sum.invoke(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">// 等价于sum(1,3)，这就是运算符重载</span><br></code></pre></td></tr></table></figure><p>注意：在Lambda表达式return，是return整个方法体。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    args.forEach &#123;<br>        <span class="hljs-comment">// 如果满足条件，则会返回整个函数体，也就是main函数，从而“The End”将不会打印</span><br>        <span class="hljs-keyword">if</span>(it == <span class="hljs-string">&quot;1&quot;</span>) <span class="hljs-keyword">return</span><br>        println(it)<br>    &#125;<br>    println(<span class="hljs-string">&quot;The End&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// 如果不想返回整个方法体，可以加ForEach@</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    args.forEach <span class="hljs-symbol">ForEach@</span>&#123;<br>        <span class="hljs-comment">// 如果满足条件，则只会返回当前函数体，“The End”将会被打印</span><br>        <span class="hljs-keyword">if</span>(it == <span class="hljs-string">&quot;1&quot;</span>) <span class="hljs-keyword">return</span><span class="hljs-symbol">@ForEach</span><br>        println(it)<br>    &#125;<br>    println(<span class="hljs-string">&quot;The End&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>Lambda表达式的简化</p><ul><li>函数参数调用时最后一个Lambda可以移出去</li><li>函数参数只有一个Lambda，调用时小括号可省略</li><li>Lambda只有一个参数可默认为it</li><li>入参、返回值与形参一致的函数可以用函数引用的方式作为实参传入，也就是使用 ::</li></ul><h3 id="八、字符串模板"><a href="#八、字符串模板" class="headerlink" title="八、字符串模板"></a>八、字符串模板</h3><ul><li><p>取值</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义格式：&quot;$取值的变量名&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">val</span> str = <span class="hljs-string">&quot;number = <span class="hljs-variable">$number</span>&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>无缝拼接</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义格式：&quot;$&#123; 取值的变量名 &#125;需要拼接的内容&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">val</span> strAppend = <span class="hljs-string">&quot;number = <span class="hljs-subst">$&#123; number &#125;</span>12121&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>转义</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义格式：&quot;\需要转义的内容&quot;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">val</span> strTransfer = <span class="hljs-string">&quot;\$number&quot;</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="九、类型转换"><a href="#九、类型转换" class="headerlink" title="九、类型转换"></a>九、类型转换</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> numberStr = <span class="hljs-string">&quot;12&quot;</span><br><span class="hljs-keyword">val</span> numberInt = numberStr.toInt() <span class="hljs-comment">// toFloat(), toDouble等等</span><br></code></pre></td></tr></table></figure><h3 id="十、equals-和-以及"><a href="#十、equals-和-以及" class="headerlink" title="十、equals 和 == 以及 ==="></a>十、equals 和 == 以及 ===</h3><ul><li><p>字符串比较，equals 可以用 == 替代，它们都是比较的内容是否相等</p></li><li><p>对象比较，equals 也可以用 == 替代，使用 == 比较，最后还是调用对象里的equals()方法进行比较；如果比较的是对象的引用值，可以使用 === 进行比较</p></li></ul><h3 id="十一、空安全"><a href="#十一、空安全" class="headerlink" title="十一、空安全"></a>十一、空安全</h3><p>任何对象都可分为可空和不可空。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 可空</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">token</span><span class="hljs-params">()</span></span>:String? &#123; <span class="hljs-comment">// 在返回数据类型后面加?，表示可空</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br><br><span class="hljs-keyword">val</span> token = token()<br><span class="hljs-keyword">if</span>(token != <span class="hljs-literal">null</span>) &#123; <span class="hljs-comment">// 但在使用过程中，必修判断是否为空，否则token.length将编译不通过</span><br>    <span class="hljs-keyword">val</span> length = token.length<br>&#125;f<br><br>或者<br><span class="hljs-keyword">val</span> length = token()!!.length <span class="hljs-comment">// 加!!，表示信任，知道token()返回的数据永远不会为空</span><br><br>亦或者<br><span class="hljs-keyword">val</span> length = token()?.length <span class="hljs-comment">// 加?，表示如果token()返回为null，则直接返回null，不会报错；否者调用length返回具体长度</span><br><br>还可以<br>token()?: <span class="hljs-keyword">return</span> <span class="hljs-comment">// 如果为空，则直接返回</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 不可空</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">token</span><span class="hljs-params">()</span></span>:String &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><br><span class="hljs-keyword">val</span> length = token().length<br></code></pre></td></tr></table></figure><h3 id="十二、数组（Array）"><a href="#十二、数组（Array）" class="headerlink" title="十二、数组（Array）"></a>十二、数组（Array）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intArr = intArrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>) <span class="hljs-comment">// floatArrayOf(), doubleArrayOf()...</span><br><span class="hljs-keyword">val</span> strArr = arrayOf(<span class="hljs-string">&quot;str1&quot;</span>, <span class="hljs-string">&quot;str2&quot;</span>, <span class="hljs-string">&quot;str3&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="1-遍历数组"><a href="#1-遍历数组" class="headerlink" title="1. 遍历数组"></a>1. 遍历数组</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> strArr = arrayOf(<span class="hljs-string">&quot;str1&quot;</span>, <span class="hljs-string">&quot;str2&quot;</span>, <span class="hljs-string">&quot;str3&quot;</span>)<br><span class="hljs-keyword">for</span>(str <span class="hljs-keyword">in</span> strArr) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(str)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-角标遍历数组"><a href="#2-角标遍历数组" class="headerlink" title="2.角标遍历数组"></a>2.角标遍历数组</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> strArr = arrayOf(<span class="hljs-string">&quot;str1&quot;</span>, <span class="hljs-string">&quot;str2&quot;</span>, <span class="hljs-string">&quot;str3&quot;</span>)<br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> strArr.indices) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(strArr[index])<br>&#125;<br><br>或者<br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> IntRange(<span class="hljs-number">0</span>, strArr.size-<span class="hljs-number">1</span>)) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(strArr[index])<br>&#125;<br><br>或者<br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> <span class="hljs-number">0.</span>.strArr.size-<span class="hljs-number">1</span>) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(strArr[index])<br>&#125;<br><br>或者<br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> <span class="hljs-number">0</span> until strArr.size) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(strArr[index])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十三、区间（Range）"><a href="#十三、区间（Range）" class="headerlink" title="十三、区间（Range）"></a>十三、区间（Range）</h3><ul><li>一个数学上的概念，表示范围</li><li>ClosedRange的子类，IntRange最常用</li><li>基本写法：<ul><li>0..100 表示[0, 100]</li><li>0 until 100 表示[0, 100)</li><li>index in 0..100 判断index是否在[0, 100]中</li></ul></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> intRange = IntRange(<span class="hljs-number">0</span>, strArr.size) <span class="hljs-comment">//[0,3] 0,1,2,3</span><br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> intRange) &#123;<br>    Log.e(TAG, <span class="hljs-string">&quot;index=&quot;</span> + index)<br>&#125;<br><br>或者<br><span class="hljs-keyword">val</span> intRange = <span class="hljs-number">0.</span>.strArr.size <span class="hljs-comment">//[0,3] 0,1,2,3</span><br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> intRange) &#123;<br>    Log.e(TAG, <span class="hljs-string">&quot;index=&quot;</span> + index)<br>&#125;<br><br>或者<br><span class="hljs-keyword">val</span> intRange = <span class="hljs-number">0</span> until strArr.size <span class="hljs-comment">//[0,2] 0,1,2</span><br><span class="hljs-keyword">for</span>(index <span class="hljs-keyword">in</span> intRange) &#123;<br>    Log.e(TAG, <span class="hljs-string">&quot;index=&quot;</span> + index)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十四、Lambda再探"><a href="#十四、Lambda再探" class="headerlink" title="十四、Lambda再探"></a>十四、Lambda再探</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 需求：过滤掉strArr中的&quot;&quot;空字符串</span><br><span class="hljs-comment">// 步骤：1. 创建一个新的数组用来存放空字符串，2. 遍历数组判断字符串是否为空，3. 遍历数组</span><br><span class="hljs-comment">// 演变过程：</span><br>strArr.filter (&#123; element -&gt; element.isNotEmpty() &#125;).forEach &#123;<br>e(it)<br>&#125;<br><br>strArr.filter ()&#123; element -&gt; element.isNotEmpty() &#125;.forEach &#123;<br>    e(it)<br>&#125;<br><br>strArr.filter &#123; element -&gt; element.isNotEmpty() &#125;.forEach &#123;<br>    e(it)<br>&#125;<br><br>strArr.filter &#123; it.isNotEmpty() &#125;.forEach &#123;<br>    e(it)<br>&#125;<br><br>strArr.filter &#123; it.isNotEmpty() &#125;.forEach (::e) <span class="hljs-comment">// 参数类型能够匹配的情况下可以用 :: 来代替</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印日志</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">e</span><span class="hljs-params">(message: <span class="hljs-type">String</span>)</span></span> &#123;<br>    Log.e(TAG, message)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="十五、when表达式"><a href="#十五、when表达式" class="headerlink" title="十五、when表达式"></a>十五、when表达式</h3><p>相当于Java版的switch case</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> num = <span class="hljs-number">1</span><br><span class="hljs-keyword">when</span>(num) &#123;<br>    <span class="hljs-number">1</span> -&gt; Log.e(TAG, <span class="hljs-string">&quot;is 1&quot;</span>)<br>    <span class="hljs-keyword">is</span> <span class="hljs-built_in">Int</span> -&gt; Log.e(TAG, <span class="hljs-string">&quot;is Int&quot;</span>)<br>    <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.3</span> -&gt; Log.e(TAG, <span class="hljs-string">&quot;in 1..3&quot;</span>)<br>    !<span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.3</span> -&gt; Log.e(TAG, <span class="hljs-string">&quot;not in 1..3&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">val</span> numStr = <span class="hljs-keyword">when</span>(num) &#123;<br>    <span class="hljs-number">1</span> -&gt; <span class="hljs-string">&quot;1&quot;</span><br>    <span class="hljs-number">2</span> -&gt; <span class="hljs-string">&quot;2&quot;</span><br>    <span class="hljs-keyword">else</span> -&gt; <span class="hljs-string">&quot;&quot;</span><br>&#125;<br>Log.e(TAG, <span class="hljs-string">&quot;numberStr = <span class="hljs-variable">$numStr</span>&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="十六、类的创建"><a href="#十六、类的创建" class="headerlink" title="十六、类的创建"></a>十六、类的创建</h3><p>所有类都最终继承自Any</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 创建类 Person；相当于Java类，并定义了两个属性：name 和 age，而且还定义了两个（get）方法：getName 和 getAge</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">val</span> name:String, <span class="hljs-keyword">val</span> age:<span class="hljs-built_in">Int</span>)<br><br><span class="hljs-keyword">val</span> person = Person(<span class="hljs-string">&quot;Zane&quot;</span>, <span class="hljs-number">26</span>)<br><br><span class="hljs-comment">// 怎样让其拥有get和set方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">var</span> name:String, <span class="hljs-keyword">var</span> age:<span class="hljs-built_in">Int</span>) <span class="hljs-comment">// 将val改成var</span><br></code></pre></td></tr></table></figure><h3 id="十七、构造函数重载"><a href="#十七、构造函数重载" class="headerlink" title="十七、构造函数重载"></a>十七、构造函数重载</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>(<span class="hljs-keyword">val</span> name:String?, <span class="hljs-keyword">val</span> age:<span class="hljs-built_in">Int</span>)<br><br><span class="hljs-comment">// 构造函数重载</span><br>&#123;<br>    <span class="hljs-keyword">constructor</span>(name:String):<span class="hljs-keyword">this</span>(name, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">constructor</span>():<span class="hljs-keyword">this</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">0</span>)<br>&#125;<br><br><span class="hljs-keyword">val</span> person1 = Person()<br><span class="hljs-keyword">val</span> person2 = Person(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-keyword">val</span> person = Person(<span class="hljs-string">&quot;Zane&quot;</span>, <span class="hljs-number">26</span>)<br><br><span class="hljs-comment">// 改进</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br><br>    <span class="hljs-keyword">var</span> name:String? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">var</span> age:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">constructor</span>()<br>    <br>    <span class="hljs-keyword">constructor</span>(name:String) &#123;<br>        <span class="hljs-keyword">this</span>.name =name<br>    &#125;<br>    <br>    <span class="hljs-keyword">constructor</span>(name:String, age:<span class="hljs-built_in">Int</span>) &#123;<br>        <span class="hljs-keyword">this</span>.name = name<br>        <span class="hljs-keyword">this</span>.age = age<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> person1 = Person()<br><span class="hljs-keyword">val</span> person2 = Person(<span class="hljs-string">&quot;Hello World&quot;</span>)<br><span class="hljs-keyword">val</span> person = Person(<span class="hljs-string">&quot;Zane&quot;</span>, <span class="hljs-number">26</span>)<br></code></pre></td></tr></table></figure><h3 id="十八、类的成员"><a href="#十八、类的成员" class="headerlink" title="十八、类的成员"></a>十八、类的成员</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> age:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> name:String? = <span class="hljs-literal">null</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>定义的属性，默认的情况下会拥有get和set方法</strong>，如果想私有化属性的get和set方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义name属性，默认的情况下就会拥有get和set方法</span><br><span class="hljs-comment">// 默认情况下，属性是用protected修饰的</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> name:String? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span> <span class="hljs-comment">//私有化set方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">get</span> <span class="hljs-comment">//私有化get方法，但私有化get方法，须将属性定义为private</span><br></code></pre></td></tr></table></figure><p>示例：判断传参的年龄是否大于0，如果小于0，返回0，否则直接返回</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> age:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">get</span>() &#123; <span class="hljs-comment">// 覆写该属性的get方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">if</span>(field &lt; <span class="hljs-number">0</span>) <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> field<br>    &#125;<br></code></pre></td></tr></table></figure><p>属性初始化：</p><ul><li><p>属性的初始化尽量在构造方法中完成</p></li><li><p>无法在构造方法中初始化，尝试降级为局部变量</p></li><li><p><strong>var 用 lateinit 延迟初始化，val 用 lazy</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">T</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> c:String<br>    <span class="hljs-keyword">lateinit</span> <span class="hljs-keyword">var</span> d:T<br>    <span class="hljs-keyword">val</span> e:T <span class="hljs-keyword">by</span> lazy &#123; <span class="hljs-comment">// 在使用该属性的的时候才会初始化</span><br>        T()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>可空类型谨慎用null直接初始化</p></li></ul><h3 id="十九、类的继承"><a href="#十九、类的继承" class="headerlink" title="十九、类的继承"></a>十九、类的继承</h3><ul><li>父类需要open才可以被继承</li><li>父类方法、属性需要open才可以被覆写</li><li>接口、接口方法、抽象类默认就为open</li><li>覆写父类（接口）成员需要override关键字</li><li>子类（实现类）继承（实现）父类（接口），使用 ：</li><li>继承类时实际上调用了父类构造方法</li><li>类只能单继承，接口可以多实现</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 创建Person类，且须使用open进行修饰</span><br><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;<br>    <span class="hljs-keyword">var</span> age:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">var</span> name:String? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">constructor</span>(name:String) &#123;<br>        <span class="hljs-keyword">this</span>.name =name<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 创建Student类，继承Person类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span></span>(name:String) : Person(name) &#123;<br><br>&#125;<br><br><span class="hljs-keyword">val</span> student = Student(<span class="hljs-string">&quot;Zane&quot;</span>)<br>student.name = <span class="hljs-string">&quot;hello world&quot;</span><br>student.age = <span class="hljs-number">26</span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">QQStepView</span> : <span class="hljs-type">View &#123;</span></span><br><br>    <span class="hljs-keyword">constructor</span>(context: Context):<span class="hljs-keyword">this</span>(context, <span class="hljs-literal">null</span>)<br><br>    <span class="hljs-keyword">constructor</span>(context: Context, attributes: AttributeSet?):<span class="hljs-keyword">this</span>(context, attributes, <span class="hljs-number">0</span>)<br><br>    <span class="hljs-keyword">constructor</span>(context: Context, attributes: AttributeSet?, defStyle: <span class="hljs-built_in">Int</span>):<span class="hljs-keyword">super</span>(context, attributes, defStyle) &#123;<br>        <span class="hljs-comment">// 写代码，获取自定义属性的内容...</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onDraw</span><span class="hljs-params">(canvas: <span class="hljs-type">Canvas</span>?)</span></span> &#123;<br>        <span class="hljs-keyword">super</span>.onDraw(canvas)<br><br>        Log.e(<span class="hljs-string">&quot;QQStepView&quot;</span>, <span class="hljs-string">&quot;onDraw&quot;</span>)<br>    &#125;<br>&#125;<br><br>&lt;io.github.kotlin.day01.QQStepView<br>    android:layout_width=<span class="hljs-string">&quot;match_parent&quot;</span><br>    android:layout_height=<span class="hljs-string">&quot;match_parent&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 成员属性继承或覆写</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonKt</span></span>(<span class="hljs-keyword">open</span> <span class="hljs-keyword">val</span> age:<span class="hljs-built_in">Int</span>) &#123; <span class="hljs-comment">// 要想让子类继承或覆写该字段，就需要使用open关键字来修饰</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Programmer</span></span>(age: <span class="hljs-built_in">Int</span>):PersonKt(age) &#123;<br>    <span class="hljs-comment">// 除了方法可以被继承或覆写，成员属性也可以被继承或覆写，但在子类中需要加override关键字来修饰，而且父类需要使用open关键字来修饰</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-keyword">val</span> age: <span class="hljs-built_in">Int</span><br>        <span class="hljs-keyword">get</span>() &#123; <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>&#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;我是码农，我在搬砖...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Doctor</span></span>(age: <span class="hljs-built_in">Int</span>): PersonKt(age) &#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;我是医生，我在动手术...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> programmer:PersonKt = Programmer(<span class="hljs-number">23</span>)<br>    programmer.work()<br>    println(programmer.age)<br><br>    <span class="hljs-keyword">val</span> doctor:PersonKt = Doctor(<span class="hljs-number">24</span>)<br>    doctor.work()<br>    println(doctor.age)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口代理：</strong></p><ul><li>接口方法实现交给代理类实现</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 接口代理</span><br><span class="hljs-comment">  */</span><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Driver</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">driver</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Writer</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarDriver</span>: <span class="hljs-type">Driver &#123;</span></span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">driver</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;开车中...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PPTWriter</span>: <span class="hljs-type">Writer &#123;</span></span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">writer</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;写PPT中...&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接口代理：Driver by driver, Writer by writer，使用 by 关键字</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SeniorManger</span></span>(<span class="hljs-keyword">val</span> driver: Driver, <span class="hljs-keyword">val</span> writer: Writer): Driver <span class="hljs-keyword">by</span> driver, Writer <span class="hljs-keyword">by</span> writer<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> carDriver = CarDriver()<br>    <span class="hljs-keyword">val</span> pptWriter = PPTWriter()<br>    <span class="hljs-keyword">val</span> seniorManger = SeniorManger(carDriver, pptWriter)<br>    seniorManger.driver()<br>    seniorManger.writer()<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>接口方法冲突：</strong></p><ul><li><p>接口方法可以有默认实现</p></li><li><p>解决签名一致且返回值相同的冲突，需要子类（实现类）必须覆写冲突方法；签名不一致的冲突，无解！</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">super</span>&lt;[父类（接口）名]&gt;.[方法名]([参数列表])<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">C</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> = <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D</span> </span>&#123;<br>    <span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span> = <span class="hljs-number">2</span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">E</span></span>(<span class="hljs-keyword">val</span> y:<span class="hljs-built_in">Int</span> = <span class="hljs-number">0</span>): B,C,D() &#123;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">x</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Int</span> &#123;<br>        println(<span class="hljs-string">&quot;call x():Int in E&quot;</span>)<br>        <span class="hljs-keyword">if</span>(y &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> y<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y &lt; -<span class="hljs-number">200</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>&lt;C&gt;.x()<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(y &lt; -<span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>&lt;B&gt;.x()<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>&lt;D&gt;.x()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    println(E(<span class="hljs-number">3</span>).x())<br>    println(E(-<span class="hljs-number">10</span>).x())<br>    println(E(-<span class="hljs-number">110</span>).x())<br>    println(E(-<span class="hljs-number">10000</span>).x())<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二十、接口与方法重载"><a href="#二十、接口与方法重载" class="headerlink" title="二十、接口与方法重载"></a>二十、接口与方法重载</h3><ul><li>接口，直观理解就是一种约定</li><li>不能有状态</li><li>必须由类对其进行实现后使用</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义接口类，使用interface关键字</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callback</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(resultJson: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-comment">// 接口方法可以有默认实现，但该方法子类将不会主动去重载</span><br>        Log.e(<span class="hljs-string">&quot;Callback:&quot;</span>, <span class="hljs-string">&quot;onSuccess&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 接口类实现</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpCallback</span> : <span class="hljs-type">Callback &#123;</span></span><br><br>    <span class="hljs-comment">// 方法重载，使用override关键字</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(resultJson: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <br>    &#125;<br><br>    <span class="hljs-comment">// 方法重载，使用override关键字</span><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二十一、抽象类"><a href="#二十一、抽象类" class="headerlink" title="二十一、抽象类"></a>二十一、抽象类</h3><ul><li>实现了一部分协议的半成品</li><li>可以有状态，可以有方法实现</li><li>必须由子类继承后使用</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义抽象类，使用abstract关键字</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpCallback</span> : <span class="hljs-type">Callback &#123;</span></span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(resultJson: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-comment">// 伪代码：获取类上的泛型，然后使用gson去转成可以直接使用的对象</span><br><br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>抽象类和接口的共性：</strong></p><ul><li>比较抽象，不能直接实例化</li><li>有需要子类（实现类）实现的方法</li><li>父类（接口）变量可以接受子类（实现类）的实例赋值</li></ul><p><strong>抽象类和接口的区别：</strong></p><ul><li>抽象类有状态，接口没有状态</li><li>抽象类有方法实现，接口只能有无状态的默认实现</li><li>抽象类只能单继承，接口可以多实现</li><li>抽象类反映本质，接口体现能力</li></ul><h3 id="二十二、匿名内部类"><a href="#二十二、匿名内部类" class="headerlink" title="二十二、匿名内部类"></a>二十二、匿名内部类</h3><ul><li>Kotlin里的匿名内部类，可以继承一个类，实现多个接口</li><li>没有定义名称的内部类，但类名编译时会生成，类似 Outter$1.class</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 定义一个类</span><br><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><br><span class="hljs-comment">// 定义接口类</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Callback</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span><br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(resultJson: <span class="hljs-type">String</span>)</span></span><br>&#125;<br><br><span class="hljs-comment">// 定义抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpCallback</span> : <span class="hljs-type">Callback &#123;</span></span><br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">(resultJson: <span class="hljs-type">String</span>)</span></span> &#123;<br>        <span class="hljs-comment">// 伪代码：获取类上的泛型，然后使用gson去转成可以直接使用的对象</span><br>        <span class="hljs-comment">// ...</span><br>        <br>        onSuccess()<br>    &#125;<br><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(callback: <span class="hljs-type">Callback</span>)</span></span> &#123;<br>        callback.onSuccess(<span class="hljs-string">&quot;成功&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> httpUtil = HttpUtil()<br><span class="hljs-comment">// 使用 object 关键字，定义匿名内部类</span><br>httpUtil.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">object</span>: HttpCallback()&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span> &#123;<br>Log.e(TAG, <span class="hljs-string">&quot;onSuccess&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;)<br><br><span class="hljs-comment">// Kotlin里的匿名内部类，可以继承一个类，实现多个接口</span><br>httpUtil.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">object</span>: Test(), HttpCallback()&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span> &#123;<br>Log.e(TAG, <span class="hljs-string">&quot;onSuccess&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="二十三、默认参数"><a href="#二十三、默认参数" class="headerlink" title="二十三、默认参数"></a>二十三、默认参数</h3><ul><li>为函数参数指定默认值</li><li>可以为任意位置的参数指定默认值，但传参时出现歧义，需要使用具名参数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtil</span> </span>&#123;<br>    <span class="hljs-comment">// cache:Boolean = false，设置默认参数false</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(callback: <span class="hljs-type">Callback</span>, url:<span class="hljs-type">String</span>, cache:<span class="hljs-type">Boolean</span> = <span class="hljs-literal">false</span>)</span></span> &#123;<br>        callback.onSuccess(<span class="hljs-string">&quot;成功&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> httpUtil = HttpUtil()<br><span class="hljs-comment">// 匿名内部类</span><br>httpUtil.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">object</span>: HttpCallback()&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span> &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;onSuccess&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;,<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>) <span class="hljs-comment">// 因为设置了默认参数，所以调用get方法时，cache参数可传可不传</span><br></code></pre></td></tr></table></figure><p>温馨提示：如果默认参数指定得靠前的话，后面的参数就必须使用具名参数进行传值！</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hello</span><span class="hljs-params">(double: <span class="hljs-type">Double</span> = <span class="hljs-number">3.0</span>, <span class="hljs-keyword">vararg</span> ints:<span class="hljs-type">Int</span>, string: <span class="hljs-type">String</span>)</span></span> &#123;<br>    println(double)<br>    ints.forEach( ::println )<br>    println(string)<br>&#125;<br><br><span class="hljs-keyword">val</span> array = intArrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br>hello(ints=*array,string=<span class="hljs-string">&quot;1&quot;</span>) <span class="hljs-comment">// 必须使用具名参数进行传值</span><br></code></pre></td></tr></table></figure><h3 id="二十四、具名参数"><a href="#二十四、具名参数" class="headerlink" title="二十四、具名参数"></a>二十四、具名参数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HttpUtil</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">get</span><span class="hljs-params">(callback: <span class="hljs-type">Callback</span>, url:<span class="hljs-type">String</span> = <span class="hljs-string">&quot;https://www.baidu.com&quot;</span>, cache:<span class="hljs-type">Boolean</span>)</span></span> &#123;<br>        callback.onSuccess(<span class="hljs-string">&quot;成功&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> httpUtil = HttpUtil()<br><span class="hljs-comment">// 匿名内部类</span><br>httpUtil.<span class="hljs-keyword">get</span>(<span class="hljs-keyword">object</span>: HttpCallback()&#123;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onSuccess</span><span class="hljs-params">()</span></span> &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;onSuccess&quot;</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onError</span><span class="hljs-params">(e: <span class="hljs-type">IOException</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;,cache = <span class="hljs-literal">true</span>) <span class="hljs-comment">// cache = true，就是具名参数</span><br></code></pre></td></tr></table></figure><h3 id="二十五、可变参数"><a href="#二十五、可变参数" class="headerlink" title="二十五、可变参数"></a>二十五、可变参数</h3><ul><li>某个参数可以接收多个值</li><li>可以不为最后一个参数</li><li>如果传参时有歧义，需要使用具名参数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalcUtil</span> </span>&#123;<br>    <span class="hljs-comment">// vararg表示可变参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> nums:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment">// 方法一</span><br>        <span class="hljs-comment">/*for (num in nums) &#123;</span><br><span class="hljs-comment">            sum += num</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">// 方法二</span><br>        nums.forEach &#123; sum += it &#125;<br>        <span class="hljs-keyword">return</span> sum<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> calcUtil = CalcUtil()<br><span class="hljs-keyword">val</span> total = calcUtil.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>Spread Operator：</p><ul><li><p>只支持展开Array</p></li><li><p>只用于可变参数列表的实参</p></li><li><p>不能重载</p></li><li><p>虽然也叫Operator，但不算一般意义上的运算符</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calc</span> </span>&#123;<br>    <span class="hljs-comment">// vararg表示可变参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> nums:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br><br>        <span class="hljs-comment">// 方法一</span><br>        <span class="hljs-comment">/*for (num in nums) &#123;</span><br><span class="hljs-comment">            sum += num</span><br><span class="hljs-comment">        &#125;*/</span><br><br>        <span class="hljs-comment">// 方法二</span><br>        nums.forEach &#123; sum += it &#125;<br>        <span class="hljs-keyword">return</span> sum<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">val</span> calc = Calc()<br><span class="hljs-keyword">val</span> array = intArrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-keyword">val</span> total = calc.add(*array) <span class="hljs-comment">// Spread Operator</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="二十六、运算符重载"><a href="#二十六、运算符重载" class="headerlink" title="二十六、运算符重载"></a>二十六、运算符重载</h3><p>参考文档：<a href="https://kotlinlang.org/docs/operator-overloading.html">https://kotlinlang.org/docs/operator-overloading.html</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Counter</span></span>(<span class="hljs-keyword">val</span> dayIndex: <span class="hljs-built_in">Int</span>) &#123;<br><br>    <span class="hljs-comment">// 加法运算符重载 +</span><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">plus</span><span class="hljs-params">(increment: <span class="hljs-type">Int</span>)</span></span>: Counter &#123;<br>        <span class="hljs-keyword">return</span> Counter(dayIndex + increment)<br>    &#125;<br><br>    <span class="hljs-comment">// 减法运算符重载 -</span><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">minus</span><span class="hljs-params">(reduce: <span class="hljs-type">Int</span>)</span></span>: Counter &#123;<br>        <span class="hljs-keyword">return</span> Counter(dayIndex - reduce)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> counter1 = Counter(<span class="hljs-number">2</span>)<br><span class="hljs-keyword">val</span> counter2 = Counter(<span class="hljs-number">6</span>)<br><span class="hljs-keyword">val</span> counter = counter1 + counter2.dayIndex<br><br><span class="hljs-keyword">val</span> counterReduce = counter1 - counter2.dayIndex<br></code></pre></td></tr></table></figure><ul><li>任何类可以定义或者重载父类的基本运算符</li><li>通过运算符对应的具名函数来定义</li><li>对参数个数做要求，对参数和返回值类型不做要求</li><li>不能像Scala一样定义任意运算符</li></ul><h3 id="二十七、伴生对象与静态成员"><a href="#二十七、伴生对象与静态成员" class="headerlink" title="二十七、伴生对象与静态成员"></a>二十七、伴生对象与静态成员</h3><ul><li>每个类可以对应一个伴生对象</li><li>伴生对象的成员全局独一份</li><li>伴生对象的成员类似 Java 的静态成员</li><li>静态成员考虑用包级函数、包级变量替代</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Util</span> </span>&#123;<br>    <span class="hljs-comment">// 静态伴生对象，仅此一份，相当于java中的static</span><br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-comment">// 静态属性</span><br>        <span class="hljs-keyword">val</span> baseUrl = <span class="hljs-string">&quot;www.baidu.com&quot;</span><br><br>        <span class="hljs-comment">// 静态方法</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> nums:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br><br>            <span class="hljs-comment">// 方法一</span><br>            <span class="hljs-comment">/*for (num in nums) &#123;</span><br><span class="hljs-comment">                sum += num</span><br><span class="hljs-comment">            &#125;*/</span><br><br>            <span class="hljs-comment">// 方法二</span><br>            nums.forEach &#123; sum += it &#125;<br>            <span class="hljs-keyword">return</span> sum<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// val total = Util.Companion.add(1,2,3) // 在Java类中使用时，需要调用Companion才能调用其中的静态方法</span><br><span class="hljs-keyword">val</span> total = Util.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><br><span class="hljs-keyword">val</span> url = Util.baseUrl<br></code></pre></td></tr></table></figure><p>如何在Java类中不调用Companion，也能直接调用静态成员呢？</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Util</span> </span>&#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-comment">// 使用@JvmField注解，在Java类中就可以直接调用该静态属性了，而不需要先调用Companion，再调用该静态属性</span><br>        <span class="hljs-meta">@JvmField</span><br>        <span class="hljs-keyword">val</span> baseUrl = <span class="hljs-string">&quot;www.baidu.com&quot;</span><br>        <br>        <span class="hljs-comment">// 使用@JvmStatic注解，在Java类中就可以直接调用该静态方法了，而不需要先调用Companion，再调用该静态方法</span><br>        <span class="hljs-meta">@JvmStatic</span><br>        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">vararg</span> nums:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>            <span class="hljs-keyword">var</span> sum = <span class="hljs-number">0</span><br>            nums.forEach &#123; sum += it &#125;<br>            <span class="hljs-keyword">return</span> sum<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticJava</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>        int sum = Util.add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>        System.<span class="hljs-keyword">out</span>.println(Util.baseUrl);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="二十八、类成员扩展"><a href="#二十八、类成员扩展" class="headerlink" title="二十八、类成员扩展"></a>二十八、类成员扩展</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> arrs = arrayOf(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-comment">// 对类方法进行扩展，因为Array类中并没有isNotEmpty方法</span><br>arrs.isNotEmpty()<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 案例：abc字符串进行叠加，如传3，就叠加3次</span><br>strContent.mulit(<span class="hljs-number">3</span>)<br><span class="hljs-comment">// val strContent = &quot;abc&quot;*3 // 运算符重载以及扩展</span><br><br><span class="hljs-comment">// 类方法扩展</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">mulit</span><span class="hljs-params">(number: <span class="hljs-type">Int</span>)</span></span>:String &#123;<br>    <span class="hljs-keyword">val</span> sb = StringBuilder()<br>    <span class="hljs-keyword">for</span>(num <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.number) &#123;<br>        sb.append(<span class="hljs-keyword">this</span>) <span class="hljs-comment">// this表示调用者</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString()<br>&#125;<br><br><span class="hljs-comment">// “*”运算符重载以及扩展</span><br><span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> String.<span class="hljs-title">times</span><span class="hljs-params">(number: <span class="hljs-type">Int</span>)</span></span>:String &#123;<br>    <span class="hljs-keyword">val</span> sb = StringBuilder()<br>    <span class="hljs-keyword">for</span>(num <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.number) &#123;<br>        sb.append(<span class="hljs-keyword">this</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString()<br>&#125;<br><br><span class="hljs-comment">// 类属性扩展</span><br><span class="hljs-keyword">val</span> String.str: String<br>    <span class="hljs-keyword">get</span>() = <span class="hljs-string">&quot;abc&quot;</span><br><br><span class="hljs-comment">// 类属性扩展的使用</span><br><span class="hljs-string">&quot;aaa&quot;</span>.str<br></code></pre></td></tr></table></figure><h3 id="二十九、内部类"><a href="#二十九、内部类" class="headerlink" title="二十九、内部类"></a>二十九、内部类</h3><ul><li><p>定义在类内部的类</p></li><li><p>默认是静态内部类，非静态用 inner 关键字</p></li><li><p>非静态内部类是持有外部类的状态的，静态内部类是不持有外部类的状态的</p></li><li><p>内部类实例必须依赖外部类的实例，则使用非静态内部类；如果内部类只是逻辑上与外部类有关联，但并不依赖外部类，则可以使用静态内部类</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Outer</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Zane_Outer&quot;</span><br><br>    <span class="hljs-comment">// 默认使用static关键字修饰，相当于Java中的静态类</span><br>    <span class="hljs-comment">/*class Inner &#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    &#125;*/</span><br>    <span class="hljs-comment">// 使用inner关键字修饰，表示该类为内部类</span><br>    <span class="hljs-keyword">inner</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Inner</span> </span>&#123;<br>        <span class="hljs-keyword">val</span> name = <span class="hljs-string">&quot;Zane_Inner&quot;</span><br>         <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">printName</span><span class="hljs-params">()</span></span> &#123;<br>             <span class="hljs-comment">// 内部类访问外部类成员属性，使用this@外部类名称</span><br>             Log.e(<span class="hljs-string">&quot;Inner&quot;</span>, <span class="hljs-string">&quot;name = <span class="hljs-subst">$&#123;this@Outer.name&#125;</span>&quot;</span>)<br>         &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 使用</span><br><span class="hljs-comment">// Outer.Inner() //静态内部类的调用</span><br>Outer().Inner().printName() <span class="hljs-comment">// 打印“Zane_Outer”</span><br></code></pre></td></tr></table></figure><h3 id="三十、枚举"><a href="#三十、枚举" class="headerlink" title="三十、枚举"></a>三十、枚举</h3><ul><li>实例可数的类，注意枚举也是类</li><li>可以修改构造，添加成员</li><li>可以提升代码的表现力，也有一定的性能开销</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogLevel</span>  </span>&#123;<br>    VERBOSE,DEBUG,INFO,WARN,ERROR,ASSERT<br>&#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogLevel2</span> <span class="hljs-keyword">protected</span> <span class="hljs-keyword">constructor</span></span>() &#123;<br>    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> &#123;<br>        <span class="hljs-keyword">val</span> VERBOSE= LogLevel2()<br>        <span class="hljs-keyword">val</span> DEBUG= LogLevel2()<br>        <span class="hljs-keyword">val</span> INFO= LogLevel2()<br>        <span class="hljs-keyword">val</span> WARN= LogLevel2()<br>        <span class="hljs-keyword">val</span> ERROR= LogLevel2()<br>        <span class="hljs-keyword">val</span> ASSERT= LogLevel2()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">enum</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogLevel</span></span>(<span class="hljs-keyword">val</span> tag:<span class="hljs-built_in">Int</span>)  &#123;<br>    VERBOSE(<span class="hljs-number">0</span>),DEBUG(<span class="hljs-number">1</span>),INFO(<span class="hljs-number">2</span>),WARN(<span class="hljs-number">3</span>),ERROR(<span class="hljs-number">4</span>),ASSERT(<span class="hljs-number">5</span>);<br><br>    <span class="hljs-comment">// 枚举里也可以定义方法，但枚举列最后必须加;</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getTag</span><span class="hljs-params">()</span></span>:String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-variable">$tag</span>&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>: String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;<span class="hljs-variable">$tag</span> , <span class="hljs-variable">$name</span>&quot;</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    println(LogLevel.DEBUG.getTag())<br><br>    println(LogLevel.DEBUG.ordinal)<br><br>    LogLevel.values().map(::println)<br><br>    println(LogLevel.valueOf(<span class="hljs-string">&quot;ERROR&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三十一、智能类型转换"><a href="#三十一、智能类型转换" class="headerlink" title="三十一、智能类型转换"></a>三十一、智能类型转换</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> person: Person = Student(<span class="hljs-string">&quot;zane&quot;</span>)<br><span class="hljs-keyword">if</span>(person <span class="hljs-keyword">is</span> Student) &#123;<br>    person.getStudentName()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> str1:String? = <span class="hljs-string">&quot;zane&quot;</span><br><span class="hljs-keyword">if</span>(str1 != <span class="hljs-literal">null</span>) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(str1.length)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> person: Person = Person(<span class="hljs-string">&quot;zane&quot;</span>)<br><span class="hljs-comment">// val student:Student = person as Student // 将person强制转换为Student，此时会报类型转换异常</span><br><span class="hljs-keyword">val</span> student:Student? = person <span class="hljs-keyword">as</span>? Student <span class="hljs-comment">// 将person强制转换为Student，如果不能转换则返回null，但不报类型转换异常</span><br></code></pre></td></tr></table></figure><h3 id="三十二、中缀表达式"><a href="#三十二、中缀表达式" class="headerlink" title="三十二、中缀表达式"></a>三十二、中缀表达式</h3><ul><li>只有一个参数，且用infix修饰的函数</li><li>可以允许不用 “对象.xx()” 去调用方法</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Book</span> </span>&#123;<br>    <span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">on</span><span class="hljs-params">(place: <span class="hljs-type">String</span>)</span></span>&#123;...&#125;<br>&#125;<br><br><span class="hljs-comment">// on是Book类中的方法，但使用了infix关键字修饰，则表示中缀表达式，可不用 &quot;对象.xx()&quot; 去调用该方法</span><br>Book() on <span class="hljs-string">&quot;My Desk&quot;</span><br></code></pre></td></tr></table></figure><p><strong>温馨提示：如果想自定义运算符，可采用中缀表达式，但不可乱用哟~</strong></p><h3 id="三十三、分支表达式（if）"><a href="#三十三、分支表达式（if）" class="headerlink" title="三十三、分支表达式（if）"></a>三十三、分支表达式（if）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> DEBUG = <span class="hljs-number">1</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">val</span> USER = <span class="hljs-number">0</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-comment">// if表达式是有值返回的，返回的值就是if表达式的各分支的最后一个表达式的值</span><br>    <span class="hljs-keyword">val</span> mode = <span class="hljs-keyword">if</span>(args.isNotEmpty() &amp;&amp; args[<span class="hljs-number">0</span>] == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>        DEBUG<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        USER<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三十四、循环语句"><a href="#三十四、循环语句" class="headerlink" title="三十四、循环语句"></a>三十四、循环语句</h3><ul><li><p>for循环</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span>(arg <span class="hljs-keyword">in</span> args) &#123;<br>    println(arg)<br>&#125;<br><br><span class="hljs-keyword">for</span>((index, value) <span class="hljs-keyword">in</span> args.withIndex()) &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$index</span> -&gt; <span class="hljs-variable">$value</span>&quot;</span>)<br>&#125;<br><br><span class="hljs-keyword">for</span>(indexAndValue <span class="hljs-keyword">in</span> args.withIndex()) &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;indexAndValue.index&#125;</span> -&gt; <span class="hljs-subst">$&#123;indexAndValue.value&#125;</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIterator</span></span>(<span class="hljs-keyword">val</span> iterator: Iterator&lt;<span class="hljs-built_in">Int</span>&gt;) &#123;<br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">next</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> iterator.next()<br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> iterator.hasNext()<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyIntList</span></span>() &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">val</span> list = ArrayList&lt;<span class="hljs-built_in">Int</span>&gt;()<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(value:<span class="hljs-type">Int</span>)</span></span> &#123;<br>        list.add(value)<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">remove</span><span class="hljs-params">(value:<span class="hljs-type">Int</span>)</span></span> &#123;<br>        list.remove(value)<br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>:MyIterator &#123;<br>        <span class="hljs-keyword">return</span> MyIterator(list.iterator())<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> list = MyIntList()<br>    list.add(<span class="hljs-number">1</span>)<br>    list.add(<span class="hljs-number">2</span>)<br>    list.add(<span class="hljs-number">3</span>)<br><br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> list) &#123;<br>        println(i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>while循环</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">var</span> x = <span class="hljs-number">15</span><br><span class="hljs-comment">// 先判断条件是否满足，后执行执行语句</span><br><span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>    println(x)<br>    x--<br>&#125;<br><br><span class="hljs-comment">// 先执行执行语句，后判断条件是否满足</span><br><span class="hljs-keyword">do</span> &#123;<br>    println(x)<br>    x--<br>&#125;<span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li><li><p>continue和break</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">for</span>(arg <span class="hljs-keyword">in</span> args) &#123;<br>    <span class="hljs-keyword">if</span>(arg == <span class="hljs-string">&quot;5&quot;</span>) <span class="hljs-keyword">continue</span> <span class="hljs-comment">// 跳过当前循环体，继续执行下一个循环体</span><br>    <span class="hljs-keyword">if</span>(arg == <span class="hljs-string">&quot;10&quot;</span>) <span class="hljs-keyword">break</span> <span class="hljs-comment">// 终止整个循环体，不再继续执行</span><br>&#125;<br><br><span class="hljs-comment">// 多层循环嵌套的终止结合标签使用</span><br><span class="hljs-symbol">Outter@</span><span class="hljs-keyword">for</span>(...)&#123;<br>    <span class="hljs-symbol">Inner@</span><span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">0</span>)&#123; <span class="hljs-keyword">if</span>(...)<span class="hljs-keyword">break</span><span class="hljs-symbol">@Outter</span> &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="三十五、异常捕获（try、catch、finally）"><a href="#三十五、异常捕获（try、catch、finally）" class="headerlink" title="三十五、异常捕获（try、catch、finally）"></a>三十五、异常捕获（try、catch、finally）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">val</span> arg0 = args[<span class="hljs-number">0</span>].toInt()<br>    <span class="hljs-keyword">val</span> arg1 = args[<span class="hljs-number">1</span>].toInt()<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$arg0</span> + <span class="hljs-variable">$arg1</span> = <span class="hljs-subst">$&#123;arg0 + arg1&#125;</span>&quot;</span>)<br>&#125;<span class="hljs-keyword">catch</span> (e: NumberFormatException) &#123;<br>    println(<span class="hljs-string">&quot;您确定输入的参数为整数吗？&quot;</span>)<br>&#125;<span class="hljs-keyword">catch</span> (e: ArrayIndexOutOfBoundsException) &#123;<br>    println(<span class="hljs-string">&quot;您确定输入的是两个整数吗？&quot;</span>)<br>&#125;<span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>    println(<span class="hljs-string">&quot;未知错误！&quot;</span>)<br>&#125;<span class="hljs-keyword">finally</span> &#123;<br>    <span class="hljs-comment">// 不管程序是否捕获异常与否，都会执行这里</span><br>    println(<span class="hljs-string">&quot;感谢您使用加法计算器！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>try、catch也是一个表达式：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> result = <span class="hljs-keyword">try</span>&#123;<br>    args[<span class="hljs-number">0</span>].toInt() / args[<span class="hljs-number">1</span>].toInt()<br>&#125;<span class="hljs-keyword">catch</span>(e:Exception) &#123;<br>    e.printStackTrace()<br>    <span class="hljs-number">0</span><br>&#125;<br>println(result)<br></code></pre></td></tr></table></figure><h3 id="小结（计算器示例）"><a href="#小结（计算器示例）" class="headerlink" title="小结（计算器示例）"></a>小结（计算器示例）</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Operator</span></span>(op:String) &#123;<br>    <span class="hljs-keyword">val</span> onFun:(left: <span class="hljs-built_in">Double</span>, right: <span class="hljs-built_in">Double</span>) -&gt; <span class="hljs-built_in">Double</span><br><br>    <span class="hljs-keyword">init</span> &#123;<br>        onFun = <span class="hljs-keyword">when</span>(op) &#123;<br>            <span class="hljs-string">&quot;+&quot;</span> -&gt; &#123;l,r -&gt; l + r&#125;<br>            <span class="hljs-string">&quot;-&quot;</span> -&gt; &#123;l,r -&gt; l - r&#125;<br>            <span class="hljs-string">&quot;*&quot;</span> -&gt; &#123;l,r -&gt; l * r&#125;<br>            <span class="hljs-string">&quot;/&quot;</span> -&gt; &#123;l,r -&gt; l / r&#125;<br>            <span class="hljs-string">&quot;%&quot;</span> -&gt; &#123;l,r -&gt; l % r&#125;<br>            <span class="hljs-keyword">else</span> -&gt; &#123;<br>                <span class="hljs-keyword">throw</span> UnsupportedOperationException(op)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 运算符重载</span><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">invoke</span><span class="hljs-params">(left: <span class="hljs-type">Double</span>, right: <span class="hljs-type">Double</span>)</span></span>: <span class="hljs-built_in">Double</span> &#123;<br>        <span class="hljs-keyword">return</span> onFun(left, right)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        println(<span class="hljs-string">&quot;请输入需要计算的内容，如3 + 4，运算符之间使用空格分隔哟~&quot;</span>)<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">val</span> input = readLine()?:<span class="hljs-keyword">break</span><br>            <span class="hljs-comment">// 避免输入内容前后为空时报错</span><br>            <span class="hljs-keyword">val</span> splits = input.trim().split(<span class="hljs-string">&quot; &quot;</span>)<br>            <span class="hljs-keyword">if</span>(splits.size != <span class="hljs-number">3</span>) &#123;<br>                <span class="hljs-keyword">throw</span> IllegalArgumentException(<span class="hljs-string">&quot;参数个数不对&quot;</span>)<br>            &#125;<br><br>            <span class="hljs-keyword">val</span> arg1 = splits[<span class="hljs-number">0</span>].toDouble()<br>            <span class="hljs-keyword">val</span> op = splits[<span class="hljs-number">1</span>]<br>            <span class="hljs-keyword">val</span> arg2 = splits[<span class="hljs-number">2</span>].toDouble()<br><br>            println(<span class="hljs-string">&quot;<span class="hljs-variable">$arg1</span> <span class="hljs-variable">$op</span> <span class="hljs-variable">$arg2</span> = <span class="hljs-subst">$&#123;Operator(op)(arg1, arg2)&#125;</span>&quot;</span>)<br><br>        &#125;<span class="hljs-keyword">catch</span> (e: IllegalArgumentException) &#123;<br>            println(<span class="hljs-string">&quot;应输入三个参数的数字，且用空格分割！&quot;</span>)<br>        &#125;<span class="hljs-keyword">catch</span> (e: UnsupportedOperationException) &#123;<br>            println(<span class="hljs-string">&quot;暂不支持该运算：<span class="hljs-subst">$&#123;e.message&#125;</span>&quot;</span>)<br>        &#125;<span class="hljs-keyword">catch</span> (e: NumberFormatException) &#123;<br>            println(<span class="hljs-string">&quot;您确定输入的是数字？&quot;</span>)<br>        &#125;<span class="hljs-keyword">catch</span> (e: Exception) &#123;<br>            println(<span class="hljs-string">&quot;未知异常！&quot;</span>)<br>        &#125;<br><br>        println(<span class="hljs-string">&quot;是否继续？[Y]&quot;</span>)<br>        <span class="hljs-keyword">val</span> cmd = readLine()<br>        <span class="hljs-keyword">if</span>(cmd == <span class="hljs-literal">null</span> || cmd.toLowerCase() != <span class="hljs-string">&quot;y&quot;</span>) &#123;<br>            <span class="hljs-keyword">break</span><br>        &#125;<br>    &#125;<br>    println(<span class="hljs-string">&quot;欢迎再次使用！&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三十六、导出可执行程序"><a href="#三十六、导出可执行程序" class="headerlink" title="三十六、导出可执行程序"></a>三十六、导出可执行程序</h3><p>在项目build.gradle文件中，添加如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">apply plugin:<span class="hljs-string">&#x27;application&#x27;</span><br>mainClassName = <span class="hljs-string">&quot;io.github.kotlin.day01.CalcDemoKt&quot;</span> <span class="hljs-comment">// 包名路径+类名+Kt</span><br></code></pre></td></tr></table></figure><p>然后重新build一下，打开右侧Gradle控制板！我TM不想说了…继续下一个知识点！</p><h3 id="三十七、类及其成员的可见性（private、protected、internal、public）"><a href="#三十七、类及其成员的可见性（private、protected、internal、public）" class="headerlink" title="三十七、类及其成员的可见性（private、protected、internal、public）"></a>三十七、类及其成员的可见性（private、protected、internal、public）</h3><table><thead><tr><th>Kotlin</th><th>Java</th></tr></thead><tbody><tr><td>private</td><td>private</td></tr><tr><td>protected</td><td>protected</td></tr><tr><td>-</td><td>default（包内可见）</td></tr><tr><td>internal（模块内可见）</td><td>-</td></tr><tr><td>public</td><td>public</td></tr></tbody></table><h3 id="三十八、Object关键字"><a href="#三十八、Object关键字" class="headerlink" title="三十八、Object关键字"></a>三十八、Object关键字</h3><ul><li>只有一个实例的类</li><li>不能自定义构造方法</li><li>可以实现接口、继承分类</li><li>本质上就是单例模式最基本的实现</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">onExternalDriverMountListener</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onMount</span><span class="hljs-params">(driver: <span class="hljs-type">Driver</span>)</span></span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onUnMount</span><span class="hljs-params">(driver:<span class="hljs-type">Driver</span>)</span></span><br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Player</span></span><br><br><span class="hljs-keyword">object</span> MusicPlayer:onExternalDriverMountListener, Player() &#123;<br>    <span class="hljs-keyword">val</span> state = <span class="hljs-number">0</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">player</span><span class="hljs-params">(url: <span class="hljs-type">String</span>)</span></span> &#123;<br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">stop</span><span class="hljs-params">()</span></span> &#123;<br><br>    &#125;<br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onMount</span><span class="hljs-params">(driver: <span class="hljs-type">Driver</span>)</span></span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onUnMount</span><span class="hljs-params">(driver: <span class="hljs-type">Driver</span>)</span></span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三十九、包级函数"><a href="#三十九、包级函数" class="headerlink" title="三十九、包级函数"></a>三十九、包级函数</h3><ul><li>Kotlin允许不在类中定义的成员属性和方法，称为包级函数/对象</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> packStr = <span class="hljs-string">&quot;包级函数&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">packFun</span><span class="hljs-params">()</span></span>:String &#123;<br>    <span class="hljs-keyword">return</span> packStr<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Util</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>Java 怎么调用 Kotlin 的包级对象呢？</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 使用@file:JvmName(&quot;自定义类名&quot;)，必须定义在导包之前</span><br><span class="hljs-meta">@file:JvmName</span>(<span class="hljs-string">&quot;PackKotlin&quot;</span>)<br><span class="hljs-keyword">package</span> io.github.kotlin.day01<br><br><span class="hljs-keyword">val</span> packStr = <span class="hljs-string">&quot;包级函数&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">packFun</span><span class="hljs-params">()</span></span>:String &#123;<br>    <span class="hljs-keyword">return</span> packStr<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Util</span> </span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StaticJava</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> static void main(String[] args) &#123;<br>        <span class="hljs-comment">// Java中调用Kotlin的包级对象</span><br>        PackKotlin.getPackStr();<br>        PackKotlin.packFun();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十、方法重载（Overloads）与默认参数"><a href="#四十、方法重载（Overloads）与默认参数" class="headerlink" title="四十、方法重载（Overloads）与默认参数"></a>四十、方法重载（Overloads）与默认参数</h3><ul><li>方法重载：方法名相同、参数类型和个数不同的方法</li><li>Jvm函数签名的概念：与函数名、参数列表有关，与返回值类型无关</li><li>返回值类型不能作为签名的一部分，因此不能定义方法名相同但返回值类型不同的方法</li><li>方法重载与默认参数，二者可相互转换</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverLoad</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">(int: <span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> int<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">(int1: <span class="hljs-type">Int</span>, int2:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> int1 + int2<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">(string: <span class="hljs-type">String</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> string.length<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverLoad</span> </span>&#123;<br>    <span class="hljs-comment">// 默认参数</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">(int: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> int<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> overLoad = OverLoad()<br>    overLoad.a() <span class="hljs-comment">// 因为方法里有了默认参数的形参，所以不传实参也是可以的</span><br>&#125;<br><br>但如果想在Java类中使用Kotlin的默认参数，则需要添加 <span class="hljs-meta">@JvmOverloads</span> 注解<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OverLoad</span> </span>&#123;<br>    <span class="hljs-comment">// 使用@JvmOverloads注解，则可以在Java类中使用Kotlin的默认参数</span><br>    <span class="hljs-meta">@JvmOverloads</span><br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">a</span><span class="hljs-params">(int: <span class="hljs-type">Int</span> = <span class="hljs-number">0</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> int<br>    &#125;<br>&#125;<br><br>OverLoad overLoad = new OverLoad();<br>overLoad.a();<br></code></pre></td></tr></table></figure><h3 id="四十一、属性代理"><a href="#四十一、属性代理" class="headerlink" title="四十一、属性代理"></a>四十一、属性代理</h3><ul><li><p>定义方法</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span>/<span class="hljs-keyword">var</span> &lt;property name&gt;:&lt;Type&gt; <span class="hljs-keyword">by</span> &lt;expression&gt;<br></code></pre></td></tr></table></figure></li><li><p>代理者需要实现相应的 setValue/getValue方法，具体取决于是代理的 val 还是 var</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Delegates</span> </span>&#123;<br>    <span class="hljs-keyword">val</span> hello1 <span class="hljs-keyword">by</span> lazy &#123;<br>        <span class="hljs-string">&quot;Hello1&quot;</span><br>    &#125;<br><br>    <span class="hljs-comment">// val定义的属性，使用代理时，只需要实现getValue()</span><br>    <span class="hljs-keyword">val</span> hello2 <span class="hljs-keyword">by</span> X()<br><br>    <span class="hljs-comment">// var定义的属性，使用代理时，需要实现getValue()和setValue()</span><br>    <span class="hljs-keyword">var</span> hello3 <span class="hljs-keyword">by</span> X()<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">X</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">var</span> value:String? = <span class="hljs-literal">null</span><br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">getValue</span><span class="hljs-params">(thisRef: <span class="hljs-type">Any</span>?, property: <span class="hljs-type">KProperty</span>&lt;*&gt;)</span></span>: String &#123;<br>        println(<span class="hljs-string">&quot;getValue：<span class="hljs-variable">$thisRef</span> -&gt; <span class="hljs-variable">$property</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> value?:<span class="hljs-string">&quot;&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setValue</span><span class="hljs-params">(thisRef: <span class="hljs-type">Any</span>?, property: <span class="hljs-type">KProperty</span>&lt;*&gt;, value: <span class="hljs-type">String</span>)</span></span> &#123;<br>        println(<span class="hljs-string">&quot;setValue：<span class="hljs-variable">$thisRef</span> -&gt; <span class="hljs-variable">$property</span> -&gt; <span class="hljs-variable">$value</span>&quot;</span>)<br>        <span class="hljs-keyword">this</span>.value = value<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> delegates = Delegates()<br>    println(delegates.hello1)<br>    println(delegates.hello2)<br>    println(delegates.hello3)<br>    delegates.hello3 = <span class="hljs-string">&quot;hello3&quot;</span><br>    println(delegates.hello3)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十二、数据类（data-class）"><a href="#四十二、数据类（data-class）" class="headerlink" title="四十二、数据类（data class）"></a>四十二、数据类（data class）</h3><ul><li><p>默认实现了 copy、toString等方法</p></li><li><p>默认实现了componentN方法</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">val/<span class="hljs-built_in">var</span> (参数<span class="hljs-number">1</span>...参数<span class="hljs-built_in">N</span>) = 实例对象<br></code></pre></td></tr></table></figure></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span></span>(<span class="hljs-keyword">val</span> code:<span class="hljs-built_in">Int</span>, <span class="hljs-keyword">val</span> name:String)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComponentX</span></span>() &#123;<br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component1</span><span class="hljs-params">()</span></span>:String &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;您好，我是&quot;</span><br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component2</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component3</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    &#125;<br><br>    <span class="hljs-keyword">operator</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component4</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> country = Country(<span class="hljs-number">84</span>, <span class="hljs-string">&quot;中国&quot;</span>)<br>    println(country)<br>    println(country.component1())<br>    println(country.component2())<br><br>    <span class="hljs-keyword">val</span> (code, name) = country<br>    println(code)<br>    println(name)<br><br>    <span class="hljs-keyword">val</span> componentX = ComponentX()<br>    <span class="hljs-keyword">val</span> (a,b,c,d) = componentX<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$a</span> <span class="hljs-variable">$b</span><span class="hljs-variable">$c</span><span class="hljs-variable">$d</span>&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在Kotlin中，一般都将data class当作Java中的java bean，但是data class有两个问题：</p><p>1、定义一个data class的类，但它默认就是通过final关键字修饰的，这将造成data class类无法被子类继承</p><p>2、data class 的类，它默认就没有无参的构造方法</p><p>为了解决上述两个问题，官方推出了两款插件：<strong>allOpen，noArg插件</strong></p><p>如何使用这两款插件：</p><p>1、首先在项目级的build.gradle文件中，添加如下代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">buildscript &#123;<br>    ...<br>    <br>    dependencies &#123;<br>        ...<br>        <br>        classpath <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-noarg:<span class="hljs-variable">$kotlin_version</span>&quot;</span><br>        classpath <span class="hljs-string">&quot;org.jetbrains.kotlin:kotlin-allopen:<span class="hljs-variable">$kotlin_version</span>&quot;</span><br>    &#125;<br>&#125;<br><br>apply plugin:<span class="hljs-string">&#x27;kotlin-noarg&#x27;</span><br>apply plugin:<span class="hljs-string">&#x27;kotlin-allopen&#x27;</span><br><br>noArg&#123;<br>    <span class="hljs-keyword">annotation</span>(<span class="hljs-string">&quot;io.github.kotlin.day01.annotation.Poko&quot;</span>)<br>&#125;<br>allOpen&#123;<br>    <span class="hljs-keyword">annotation</span>(<span class="hljs-string">&quot;io.github.kotlin.day01.annotation.Poko&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>2、在项目中，新建annotation包，并创建Poko类（可自定义类名）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">annotation</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Poko</span></span><br></code></pre></td></tr></table></figure><p>3、重新Rebuild Project</p><h3 id="四十三、密封类（sealed-class）"><a href="#四十三、密封类（sealed-class）" class="headerlink" title="四十三、密封类（sealed class）"></a>四十三、密封类（sealed class）</h3><ul><li>密封类是子类可数（有限）的类</li><li>kotlin v1.1版本之前，子类必须定义为密封类的内部类；v1.1版本之后，子类只需要与密封类在同一个文件中</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">sealed</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlayerCmd</span> </span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Play</span></span>(<span class="hljs-keyword">val</span> url:String, <span class="hljs-keyword">val</span> position:<span class="hljs-built_in">Long</span>): PlayerCmd()<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seek</span></span>(<span class="hljs-keyword">val</span> position: <span class="hljs-built_in">Long</span>): PlayerCmd()<br><br>    <span class="hljs-keyword">object</span> Pause: PlayerCmd()<br><br>    <span class="hljs-keyword">object</span> Resume: PlayerCmd()<br><br>    <span class="hljs-keyword">object</span> Stop: PlayerCmd()<br>&#125;<br><br>或者<br><br><span class="hljs-keyword">sealed</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlayerCmd</span> </span>&#123;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Play</span></span>(<span class="hljs-keyword">val</span> url:String, <span class="hljs-keyword">val</span> position:<span class="hljs-built_in">Long</span>): PlayerCmd()<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Seek</span></span>(<span class="hljs-keyword">val</span> position: <span class="hljs-built_in">Long</span>): PlayerCmd()<br><br><span class="hljs-keyword">object</span> Pause: PlayerCmd()<br><br><span class="hljs-keyword">object</span> Resume: PlayerCmd()<br><br><span class="hljs-keyword">object</span> Stop: PlayerCmd()<br></code></pre></td></tr></table></figure><h3 id="四十四、高阶函数"><a href="#四十四、高阶函数" class="headerlink" title="四十四、高阶函数"></a>四十四、高阶函数</h3><ul><li>把函数作为参数传入或者将函数作为返回值的函数</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-comment">// forEach（无返回结果）</span><br>    <span class="hljs-keyword">val</span> list = listOf(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">val</span> newList = ArrayList&lt;<span class="hljs-built_in">Int</span>&gt;()<br><br>    list.forEach &#123;<br>        <span class="hljs-keyword">val</span> newElement = it * <span class="hljs-number">2</span> + <span class="hljs-number">3</span><br>        newList.add(newElement)<br>    &#125;<br><br>    newList.forEach(::println)<br>    <br>    <span class="hljs-comment">// map（返回值可为任意类型）</span><br>    <span class="hljs-keyword">val</span> list = listOf(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>)<br><br>    <span class="hljs-keyword">val</span> newList = list.map &#123;<br>        it * <span class="hljs-number">2</span> + <span class="hljs-number">3</span><br>    &#125;<br><br>    <span class="hljs-keyword">val</span> newList2 = list.map(<span class="hljs-built_in">Int</span>::toDouble)<br><br>    list.map(::println)<br>    <br>    newList.forEach(::println)<br>    newList2.forEach(::println)<br>    <br>    <span class="hljs-comment">// 需求：将整型集合的集合打平成集合</span><br>    <span class="hljs-comment">// flatMap（返回集合类型）</span><br>    <span class="hljs-keyword">val</span> list = listOf(<br>        <span class="hljs-number">1.</span><span class="hljs-number">.20</span>,<br>        <span class="hljs-number">2.</span><span class="hljs-number">.5</span>,<br>        <span class="hljs-number">100.</span><span class="hljs-number">.300</span>)<br>    <br>    <span class="hljs-keyword">val</span> flatList = list.flatMap&#123;<br>        it <span class="hljs-comment">// 此处的 it 为IntRange类型的区间集合</span><br>    &#125;<br><br>    flatList.forEach(::println)<br>    <br>    <span class="hljs-comment">// 需求：将打平的集合里的元素进行类型转换</span><br>    <span class="hljs-comment">// flatMap + map</span><br>    <span class="hljs-keyword">val</span> list = listOf(<br>        <span class="hljs-number">1.</span><span class="hljs-number">.20</span>,<br>        <span class="hljs-number">2.</span><span class="hljs-number">.5</span>,<br>        <span class="hljs-number">100.</span><span class="hljs-number">.300</span>)<br><br>    <span class="hljs-keyword">val</span> flatList = list.flatMap&#123;<br>        <span class="hljs-comment">// 此处的 it 为IntRange区间集合</span><br>        it.map &#123;<br>            <span class="hljs-comment">// 此处的 it 为区间集合里的int类型的元素</span><br>            <span class="hljs-string">&quot;No：<span class="hljs-variable">$it</span>&quot;</span><br>        &#125;<br>    &#125;<br><span class="hljs-comment">// flatList等价于flatList2</span><br>    <span class="hljs-keyword">val</span> flatList2 = list.flatMap &#123; intRange -&gt;<br>        intRange.map &#123;intElement -&gt;<br>            <span class="hljs-string">&quot;No：<span class="hljs-variable">$intElement</span>&quot;</span><br>        &#125;<br>    &#125;<br><br>    flatList.forEach(::println)<br>    flatList2.forEach(::println)<br>    <br>    <span class="hljs-comment">// 需求：将打平的集合里的元素进行求和</span><br>    <span class="hljs-comment">// reduce</span><br>    <span class="hljs-keyword">val</span> list = listOf(<br>        <span class="hljs-number">1.</span><span class="hljs-number">.20</span>,<br>        <span class="hljs-number">2.</span><span class="hljs-number">.5</span>,<br>        <span class="hljs-number">100.</span><span class="hljs-number">.322</span>)<br><br>    <span class="hljs-keyword">val</span> flatList = list.flatMap &#123; it &#125;<br><br>    println(flatList.reduce&#123;acc, i -&gt; acc + i&#125;) <span class="hljs-comment">// acc表示运算的结果</span><br>    <br>    <span class="hljs-comment">// 需求：求阶乘</span><br>    <span class="hljs-comment">// map + reduce</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map&#123;it -&gt; factorial(it)&#125;.forEach&#123;it -&gt; println(it)&#125;<br>    <span class="hljs-comment">// 等价于</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).forEach(::println)<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后在求和</span><br>    <span class="hljs-comment">// map + reduce + reduce</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).reduce &#123; acc, i -&gt; acc + i &#125;<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，再设置初始值，然后在求和</span><br>    <span class="hljs-comment">// map + reduce + fold</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).fold(<span class="hljs-number">5</span>)&#123; acc, i -&gt; acc + i&#125;<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，拼接成字符串</span><br>    <span class="hljs-comment">// map + reduce + fold</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).fold(StringBuilder())&#123;<br>        acc, i -&gt; acc.append(i).append(<span class="hljs-string">&quot;,&quot;</span>)<br>    &#125;<br>    <span class="hljs-comment">// 拼接字符串还可以：</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).joinToString(<span class="hljs-string">&quot;,&quot;</span>)<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，将元素倒序拼接成字符串</span><br>  <span class="hljs-comment">// map + reduce + foldRight</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).foldRight(StringBuilder()) &#123;<br>        i, acc -&gt; acc.append(i).append(<span class="hljs-string">&quot;,&quot;</span>)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，过滤出基数元素</span><br>    <span class="hljs-comment">// map + reduce + filter</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).filter &#123; i -&gt; i % <span class="hljs-number">2</span> ==<span class="hljs-number">1</span> &#125;<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，过滤出基数位置上的元素</span><br>    <span class="hljs-comment">// map + reduce + filterIndexed</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.6</span>).map(::factorial).filterIndexed&#123; index,i -&gt; index % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#125;<br>    <br>    <span class="hljs-comment">// 需求：获取到阶乘集合之后，如果遇到第一个不符合基数的条件，则结束取数据</span><br>    (<span class="hljs-number">0.</span><span class="hljs-number">.60</span>).map(::factorial).takeWhile &#123; it % <span class="hljs-number">2</span> == <span class="hljs-number">1</span> &#125;<br>&#125;<br><br><span class="hljs-comment">// 求阶乘</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">factorial</span><span class="hljs-params">(n: <span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1.</span>.n).reduce&#123;acc, i -&gt; acc * i &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 需求：判断函数返回的对象是否为null，如果对象不为null，则将对象里的成员属性一一打印出来</span><br><span class="hljs-comment">// data class + let</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonData</span></span>(<span class="hljs-keyword">val</span> name:String, <span class="hljs-keyword">val</span> age:<span class="hljs-built_in">Int</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findPerson</span><span class="hljs-params">()</span></span>: PersonData? &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    findPerson()?.let &#123; (name, age) -&gt;<br>        println(name)<br>        println(age)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 需求：判断函数返回的对象是否为null，如果对象不为null，则直接调用对象里的方法，并直接将对象里的成员属性一一打印出来</span><br><span class="hljs-comment">// data class + apply</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonData</span></span>(<span class="hljs-keyword">val</span> name:String, <span class="hljs-keyword">val</span> age:<span class="hljs-built_in">Int</span>) &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">work</span><span class="hljs-params">()</span></span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$name</span> is working!&quot;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findPerson</span><span class="hljs-params">()</span></span>: PersonData? &#123;<br>    <span class="hljs-keyword">return</span> PersonData(<span class="hljs-string">&quot;zane&quot;</span>, <span class="hljs-number">27</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    findPerson()?.apply &#123;<br>        work()<br>        println(name)<br>        println(age)<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 需求：获取本地文件内容，并打印出来</span><br><span class="hljs-comment">// with</span><br><span class="hljs-keyword">val</span> br = BufferedReader(FileReader(<span class="hljs-string">&quot;hello.txt&quot;</span>))<br>with(br)&#123; <span class="hljs-comment">// 持有BufferedReader对象，with作用域里就不需要显示声明使用对象去调用成员属性或方法</span><br>    <span class="hljs-keyword">var</span> line:String?<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        line = readLine()?:<span class="hljs-keyword">break</span><br>        println(line)<br>    &#125;<br>    close()<br>&#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">val</span> br = BufferedReader(FileReader(<span class="hljs-string">&quot;hello.txt&quot;</span>))<br><span class="hljs-keyword">var</span> line:String?<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>    line = br.readLine()?:<span class="hljs-keyword">break</span><br>    println(line)<br>&#125;<br><br><span class="hljs-comment">// 需求：获取本地文件内容，并打印出来（简化版）</span><br><span class="hljs-comment">// use（使用use可以省略close）</span><br>版本一：<span class="hljs-keyword">val</span> br = BufferedReader(FileReader(<span class="hljs-string">&quot;hello.txt&quot;</span>)).readText()<br>版本二：<span class="hljs-keyword">val</span> br = BufferedReader(FileReader(<span class="hljs-string">&quot;hello.txt&quot;</span>)).readLines() <span class="hljs-comment">// 读取文件中的所有行，并返回List集合</span><br>版本三：<br>BufferedReader(FileReader(<span class="hljs-string">&quot;hello.txt&quot;</span>)).use &#123;<br>    <span class="hljs-keyword">var</span> line:String?<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        line = it.readLine()?:<span class="hljs-keyword">break</span><br>        println(line)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十五、尾递归优化"><a href="#四十五、尾递归优化" class="headerlink" title="四十五、尾递归优化"></a>四十五、尾递归优化</h3><ul><li>尾递归：函数在调用自身之后，无其它操作</li><li>tailrec 关键字提示编译器尾递归优化</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 尾递归</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span></span>(<span class="hljs-keyword">val</span> value:<span class="hljs-built_in">Int</span>, <span class="hljs-keyword">var</span> next:ListNode? = <span class="hljs-literal">null</span>)<br><br><span class="hljs-keyword">tailrec</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findListNode</span><span class="hljs-params">(headNode:<span class="hljs-type">ListNode</span>?, value: <span class="hljs-type">Int</span>)</span></span>: ListNode? &#123;<br>    <span class="hljs-comment">// 如果头节点为null，则直接返回null</span><br>    headNode?: <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    <span class="hljs-comment">// 如果当前节点的value与之匹配，则返回当前节点</span><br>    <span class="hljs-keyword">if</span>(headNode.value == value) <span class="hljs-keyword">return</span> headNode<br>    <span class="hljs-comment">// 否则尾递归继续查找下一个节点</span><br>    <span class="hljs-keyword">return</span> findListNode(headNode.next,value) <span class="hljs-comment">// 调用自身之后，无其它操作，这就是尾递归</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> MAX_NODE_COUNT = <span class="hljs-number">100000</span><br>    <span class="hljs-keyword">val</span> headNode = ListNode(<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">var</span> p = headNode<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span>.MAX_NODE_COUNT) &#123;<br>        p.next = ListNode(i)<br>        p = p.next!!<br>    &#125;<br><br>    println(findListNode(headNode, MAX_NODE_COUNT -<span class="hljs-number">2</span>)?.value)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// 不是尾递归</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">factorial</span><span class="hljs-params">(n:<span class="hljs-type">Long</span>)</span></span>:<span class="hljs-built_in">Long</span> &#123;<br>    <span class="hljs-keyword">return</span> n * factorial(n-<span class="hljs-number">1</span>) <span class="hljs-comment">//这不是尾递归，因为在调用自身时，还与 n 相乘了</span><br>&#125;<br><br><span class="hljs-comment">// 不是尾递归</span><br><span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span></span>(<span class="hljs-keyword">val</span> value:<span class="hljs-built_in">Int</span>) &#123;<br>    <span class="hljs-keyword">val</span> left:TreeNode? = <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">val</span> right:TreeNode? = <span class="hljs-literal">null</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findTreeNode</span><span class="hljs-params">(root:<span class="hljs-type">TreeNode</span>?, value:<span class="hljs-type">Int</span>)</span></span>:TreeNode? &#123;<br>    root?:<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span><br>    <span class="hljs-keyword">if</span>(root.value == value) <span class="hljs-keyword">return</span> root<br>    <span class="hljs-keyword">return</span> findTreeNode(root.left,value)?: <span class="hljs-keyword">return</span> findTreeNode(root.right,value) <span class="hljs-comment">// 这也不是尾递归，因为调用自身之后，满足条件时还会去调用自身</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十六、闭包"><a href="#四十六、闭包" class="headerlink" title="四十六、闭包"></a>四十六、闭包</h3><ul><li>函数运行的环境</li><li>持有函数运行状态</li><li>函数内部可以定义函数</li><li>函数内部也可以定义类</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">makeFun</span><span class="hljs-params">()</span></span>:() -&gt; <span class="hljs-built_in">Unit</span> &#123;<br>    <span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>        println(++count)<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = makeFun()<br>    x()<br>    x()<br>    x()<br>    x()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span></span>:() -&gt; <span class="hljs-built_in">Long</span> &#123;<br>    <span class="hljs-keyword">var</span> first = <span class="hljs-number">0L</span><br>    <span class="hljs-keyword">var</span> second = <span class="hljs-number">1L</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>:<span class="hljs-built_in">Long</span> &#123;<br>        <span class="hljs-keyword">val</span> result = second<br>        second += first<br>        first = second - first<br>        <span class="hljs-keyword">return</span> result<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> x = fibonacci()<br>    println(x())<br>    println(x())<br>    println(x())<br>    println(x())<br>    println(x())<br>    println(x())<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span></span>: Iterable&lt;<span class="hljs-built_in">Long</span>&gt; &#123;<br>    <span class="hljs-keyword">var</span> first = <span class="hljs-number">0L</span><br>    <span class="hljs-keyword">var</span> second = <span class="hljs-number">1L</span><br>    <span class="hljs-keyword">return</span> Iterable &#123;<br>        <span class="hljs-keyword">object</span> : LongIterator() &#123;<br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span> = <span class="hljs-literal">true</span><br><br>            <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">nextLong</span><span class="hljs-params">()</span></span>: <span class="hljs-built_in">Long</span> &#123;<br>                <span class="hljs-keyword">val</span> result = second<br>                second += first<br>                first = second - first<br>                <span class="hljs-keyword">return</span> result<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">for</span> (i <span class="hljs-keyword">in</span> fibonacci()) &#123;<br>        <span class="hljs-keyword">if</span>(i &gt; <span class="hljs-number">100</span>) <span class="hljs-keyword">break</span><br>        println(i)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(x:<span class="hljs-type">Int</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(y:<span class="hljs-type">Int</span>)</span></span>= x + y<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">add</span><span class="hljs-params">(x:<span class="hljs-type">Int</span>)</span></span>:(<span class="hljs-built_in">Int</span>)-&gt;<span class="hljs-built_in">Int</span> &#123;<br>    <span class="hljs-comment">// 函数内部还可以定义类</span><br>    <span class="hljs-comment">//data class Person(val name:String, val age: Int)</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(y:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span> &#123;<br>        <span class="hljs-keyword">return</span> x + y<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> sum = add(<span class="hljs-number">6</span>)<br>    println(sum(<span class="hljs-number">2</span>))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十七、函数复合"><a href="#四十七、函数复合" class="headerlink" title="四十七、函数复合"></a>四十七、函数复合</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">// f(g(x)) m(x) = f(g(x))</span><br><br><span class="hljs-keyword">val</span> add = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(i:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span>&#123;<br>    <span class="hljs-keyword">return</span> i + <span class="hljs-number">5</span><br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">val</span> add = &#123;i:<span class="hljs-built_in">Int</span> -&gt; i + <span class="hljs-number">5</span>&#125; <span class="hljs-comment">// g(x)</span><br><br><span class="hljs-keyword">val</span> multiply = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(i:<span class="hljs-type">Int</span>)</span></span>:<span class="hljs-built_in">Int</span>&#123;<br>    <span class="hljs-keyword">return</span> i * <span class="hljs-number">2</span><br>&#125;<br><span class="hljs-comment">// 等价于</span><br><span class="hljs-keyword">val</span> multiply = &#123; i:<span class="hljs-built_in">Int</span> -&gt; i * <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// f(x)</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    println(multiply(add(<span class="hljs-number">9</span>))) <span class="hljs-comment">// (5+9)*2</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> add = &#123;i:<span class="hljs-built_in">Int</span> -&gt; i + <span class="hljs-number">5</span>&#125; <span class="hljs-comment">// g(x)</span><br><br><span class="hljs-keyword">val</span> multiply = &#123; i:<span class="hljs-built_in">Int</span> -&gt; i * <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// f(x)</span><br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> addMultiply = add andThen multiply<br>    println(addMultiply(<span class="hljs-number">9</span>)) <span class="hljs-comment">// m(x) = f(g(x))</span><br>    <br>    <span class="hljs-keyword">val</span> addComposeMultiply = add compose multiply<br>    println(addComposeMultiply(<span class="hljs-number">9</span>)) <span class="hljs-comment">// m(x) = g(f(x))</span><br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 知识点：</span><br><span class="hljs-comment"> * 1、扩展方法：Function1&lt;P1, P2&gt;.andThen</span><br><span class="hljs-comment"> * 2、中缀表达式：infix</span><br><span class="hljs-comment"> * 3、Function1：表示只能传入一个参数的方法</span><br><span class="hljs-comment"> * 4、Function1&lt;P1, P2&gt;：P1：表示参数类型，P2：表示返回值类型</span><br><span class="hljs-comment"> * 5、P1、P2、R：表示参数、参数、返回值</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span><span class="hljs-type">&lt;P1,P2, R&gt;</span> Function1<span class="hljs-type">&lt;P1, P2&gt;</span>.<span class="hljs-title">andThen</span><span class="hljs-params">(function: <span class="hljs-type">Function1</span>&lt;<span class="hljs-type">P2</span>, R&gt;)</span></span>:Function1&lt;P1, R&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p1: <span class="hljs-type">P1</span>)</span></span>:R &#123;<br>        <span class="hljs-keyword">return</span> function.invoke(<span class="hljs-keyword">this</span>.invoke(p1))<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 反函数复合</span><br><span class="hljs-keyword">infix</span> <span class="hljs-function"><span class="hljs-keyword">fun</span><span class="hljs-type">&lt;P1,P2,R&gt;</span> Function1<span class="hljs-type">&lt;P2,R&gt;</span>.<span class="hljs-title">compose</span><span class="hljs-params">(function: <span class="hljs-type">Function1</span>&lt;<span class="hljs-type">P1</span>,P2&gt;)</span></span>:Function1&lt;P1,R&gt; &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p1: <span class="hljs-type">P1</span>)</span></span>:R &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.invoke(function.invoke(p1))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十八、科理化（Currying）-函数调用链"><a href="#四十八、科理化（Currying）-函数调用链" class="headerlink" title="四十八、科理化（Currying）-函数调用链"></a>四十八、科理化（Currying）-函数调用链</h3><ul><li>简单说就是多元函数变换成一元函数调用链</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">hello</span><span class="hljs-params">(x:<span class="hljs-type">String</span>, y:<span class="hljs-type">Int</span>, z:<span class="hljs-type">Double</span>)</span></span>:<span class="hljs-built_in">Boolean</span> &#123;<br>    println(<span class="hljs-string">&quot;<span class="hljs-variable">$x</span> <span class="hljs-variable">$y</span> <span class="hljs-variable">$z</span>&quot;</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br><span class="hljs-comment">// 科理化</span><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">curriedHello</span><span class="hljs-params">(x:<span class="hljs-type">String</span>)</span></span>:(y:<span class="hljs-built_in">Int</span>) -&gt; (z:<span class="hljs-built_in">Double</span>) -&gt; <span class="hljs-built_in">Boolean</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(y:<span class="hljs-type">Int</span>)</span></span>:(z:<span class="hljs-built_in">Double</span>) -&gt; <span class="hljs-built_in">Boolean</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(z:<span class="hljs-type">Double</span>)</span></span>:<span class="hljs-built_in">Boolean</span> &#123;<br>            println(<span class="hljs-string">&quot;<span class="hljs-variable">$x</span> <span class="hljs-variable">$y</span> <span class="hljs-variable">$z</span>&quot;</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">curriedHello</span><span class="hljs-params">(x:<span class="hljs-type">String</span>)</span></span>:(y:<span class="hljs-built_in">Int</span>) -&gt; (z:<span class="hljs-built_in">Double</span>) -&gt; <span class="hljs-built_in">Boolean</span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(y:<span class="hljs-type">Int</span>)</span></span>:(z:<span class="hljs-built_in">Double</span>) -&gt; <span class="hljs-built_in">Boolean</span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(z:<span class="hljs-type">Double</span>)</span></span>: <span class="hljs-built_in">Boolean</span>&#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$x</span> <span class="hljs-variable">$y</span> <span class="hljs-variable">$z</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">curriedHello</span><span class="hljs-params">(x:<span class="hljs-type">String</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(y:<span class="hljs-type">Int</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(z:<span class="hljs-type">Double</span>)</span></span>:<span class="hljs-built_in">Boolean</span> &#123;<br>        println(<span class="hljs-string">&quot;<span class="hljs-variable">$x</span> <span class="hljs-variable">$y</span> <span class="hljs-variable">$z</span>&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125;<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    hello(<span class="hljs-string">&quot;TAG&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2.0</span>)<br>    curriedHello(<span class="hljs-string">&quot;TAG&quot;</span>)(<span class="hljs-number">11</span>)(<span class="hljs-number">3.0</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">log</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>, target: <span class="hljs-type">OutputStream</span>, message:<span class="hljs-type">Any</span>?)</span></span>&#123;<br>    target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>&#125;<br><br><span class="hljs-comment">// 科理化</span><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">logCurried</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>)</span></span>:(target:OutputStream)-&gt;(message:Any?) -&gt; <span class="hljs-built_in">Unit</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(target:<span class="hljs-type">OutputStream</span>)</span></span>:(message:Any?) -&gt;<span class="hljs-built_in">Unit</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(message:<span class="hljs-type">Any</span>?)</span></span>&#123;<br>            target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">logCurried</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>)</span></span>:(target:OutputStream) -&gt;(message:Any?) -&gt; <span class="hljs-built_in">Unit</span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(target:<span class="hljs-type">OutputStream</span>)</span></span>:(message:Any?) -&gt; <span class="hljs-built_in">Unit</span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(message:<span class="hljs-type">Any</span>?)</span></span> &#123;<br>        target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>    &#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">logCurried</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(target:<span class="hljs-type">OutputStream</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(message:<span class="hljs-type">Any</span>?)</span></span> &#123;<br>        target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>    &#125;<br><br><span class="hljs-comment">// 等价于</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">logCurried</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(target:<span class="hljs-type">OutputStream</span>)</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(message:<span class="hljs-type">Any</span>?)</span></span><br>    = target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    log(<span class="hljs-string">&quot;TAG&quot;</span>, System.<span class="hljs-keyword">out</span>, <span class="hljs-string">&quot;Hello Log&quot;</span>)<br>    logCurried(<span class="hljs-string">&quot;TAG&quot;</span>)(System.<span class="hljs-keyword">out</span>)(<span class="hljs-string">&quot;Hello LogCurried&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">log</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>, target: <span class="hljs-type">OutputStream</span>, message:<span class="hljs-type">Any</span>?)</span></span>&#123;<br>    target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>&#125;<br><br><span class="hljs-comment">// 科理化</span><br><span class="hljs-comment">// 扩展方法</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;P1,P2,P3,R&gt;</span> Function3<span class="hljs-type">&lt;P1,P2,P3,R&gt;</span>.<span class="hljs-title">curried</span><span class="hljs-params">()</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p1:<span class="hljs-type">P1</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p2:<span class="hljs-type">P2</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p3:<span class="hljs-type">P3</span>)</span></span> = <span class="hljs-keyword">this</span>(p1,p2,p3)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    ::log.curried()(<span class="hljs-string">&quot;TAG&quot;</span>)(System.<span class="hljs-keyword">out</span>)(<span class="hljs-string">&quot;Hello curried&quot;</span>) <span class="hljs-comment">// ::log表示函数的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="四十九、偏函数"><a href="#四十九、偏函数" class="headerlink" title="四十九、偏函数"></a>四十九、偏函数</h3><ul><li>传入部分参数得到的新函数</li></ul><p>需求：针对上面的科理化log函数的案例，我们发现了一个问题，tag和target这两个属性其实是不变的，如果每次调用的话都需要传一遍，这就不符合我们的代码风格了（简洁丫）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">log</span><span class="hljs-params">(tag:<span class="hljs-type">String</span>, target: <span class="hljs-type">OutputStream</span>, message:<span class="hljs-type">Any</span>?)</span></span>&#123;<br>    target.write(<span class="hljs-string">&quot;[<span class="hljs-variable">$tag</span>]：<span class="hljs-variable">$message</span>\n&quot;</span>.toByteArray())<br>&#125;<br><br><span class="hljs-comment">// 科理化</span><br><span class="hljs-comment">// 扩展方法</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;P1,P2,P3,R&gt;</span> Function3<span class="hljs-type">&lt;P1,P2,P3,R&gt;</span>.<span class="hljs-title">curried</span><span class="hljs-params">()</span></span><br>    = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p1:<span class="hljs-type">P1</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p2:<span class="hljs-type">P2</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p3:<span class="hljs-type">P3</span>)</span></span> = <span class="hljs-keyword">this</span>(p1,p2,p3)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> consoleLogWithTag = ::log.curried()(<span class="hljs-string">&quot;TAG&quot;</span>)(System.<span class="hljs-keyword">out</span>)<br>    consoleLogWithTag(<span class="hljs-string">&quot;Hello 偏函数&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">val</span> makeString = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(byteArray:<span class="hljs-type">ByteArray</span>, charset:<span class="hljs-type">Charset</span>)</span></span>: String &#123;<br>    <span class="hljs-keyword">return</span> String(byteArray, charset)<br>&#125;<br><br><span class="hljs-keyword">val</span> makeStringFromGbkBytes = makeString.partial2(charset(<span class="hljs-string">&quot;GBK&quot;</span>))<br><br><span class="hljs-comment">// 扩展方法</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;P1,P2,R&gt;</span> Function2<span class="hljs-type">&lt;P1,P2,R&gt;</span>.<span class="hljs-title">partial2</span><span class="hljs-params">(p2:<span class="hljs-type">P2</span>)</span></span> = <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(p1:<span class="hljs-type">P1</span>)</span></span> = <span class="hljs-keyword">this</span>(p1,p2)<br><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> bytes = <span class="hljs-string">&quot;我是中国人&quot;</span>.toByteArray(charset(<span class="hljs-string">&quot;GBK&quot;</span>))<br>    <span class="hljs-keyword">val</span> stringFromGBK = makeStringFromGbkBytes(bytes)<br>    println(stringFromGBK)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="小结：统计文件内字符串个数"><a href="#小结：统计文件内字符串个数" class="headerlink" title="小结：统计文件内字符串个数"></a>小结：统计文件内字符串个数</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    <span class="hljs-keyword">val</span> map = HashMap&lt;<span class="hljs-built_in">Char</span>,<span class="hljs-built_in">Int</span>&gt;()<br>    File(<span class="hljs-string">&quot;build.gradle&quot;</span>).readText().toCharArray().filterNot(<span class="hljs-built_in">Char</span>::isWhitespace).forEach &#123;<br>        <span class="hljs-keyword">val</span> count = map[it]<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-literal">null</span>) map[it] = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span> map[it] = count + <span class="hljs-number">1</span><br>    &#125;<br><br>    map.forEach(::println)<br>&#125;<br><br><span class="hljs-comment">// 简化版</span><br><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>&lt;<span class="hljs-type">String</span>&gt;)</span></span> &#123;<br>    File(<span class="hljs-string">&quot;build.gradle&quot;</span>).readText().toCharArray().filterNot(<span class="hljs-built_in">Char</span>::isWhitespace).groupBy &#123;<br>        it<br>    &#125;.map &#123;<br>        it.key to it.value.size<br>    &#125;.forEach(::println)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Kotlin</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Kotlin</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/04/16/hello-world/"/>
    <url>/2021/04/16/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
